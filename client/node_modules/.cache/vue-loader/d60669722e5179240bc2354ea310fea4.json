{"remainingRequest":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\src\\components\\BaseInput.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\src\\components\\BaseInput.vue","mtime":1606920603934},{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n    inheritAttrs: false,\n    name: \"base-input\",\n    props: {\n        required: {\n            type: Boolean,\n            description: \"Whether input is required (adds an asterix *)\"\n        },\n        valid: {\n            type: Boolean,\n            description: \"Whether is valid\",\n            default: undefined\n        },\n        label: {\n            type: String,\n            description: \"Input label (text before input)\"\n        },\n        error: {\n            type: String,\n            description: \"Input error (below input)\"\n        },\n        labelClasses: {\n            type: String,\n            description: \"Input label css classes\"\n        },\n        inputClasses: {\n            type: String,\n            description: \"Input css classes\"\n        },\n        value: {\n            type: [String, Number],\n            description: \"Input value\"\n        },\n        addonRightIcon: {\n            type: String,\n            description: \"Addon right icon\"\n        },\n        addonLeftIcon: {\n            type: String,\n            description: \"Addont left icon\"\n        },\n        isForm : {\n            type: Boolean,\n            description: \"\"\n        }\n    },\n    data() {\n        return {\n            focused: false\n        };\n    },\n    computed: {\n        listeners() {\n            return {\n                ...this.$listeners,\n                input: this.updateValue,\n                focus: this.onFocus,\n                blur: this.onBlur\n            };\n        },\n        slotData() {\n            return {\n                focused: this.focused,\n                ...this.listeners\n            };\n        },\n        hasIcon() {\n            const {addonRight, addonLeft} = this.$slots;\n            return (\n                addonRight !== undefined ||\n                addonLeft !== undefined ||\n                this.addonRightIcon !== undefined ||\n                this.addonLeftIcon !== undefined\n            );\n        }\n    },\n    methods: {\n        updateValue(evt) {\n            let value = evt.target.value;\n            this.$emit(\"input\", value);\n        },\n        onFocus(value) {\n            this.focused = true;\n            this.$emit(\"focus\", value);\n        },\n        onBlur(value) {\n            this.focused = false;\n            this.$emit(\"blur\", value);\n        }\n    }\n};\n",{"version":3,"sources":["BaseInput.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BaseInput.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div\r\n            :class=\"[\r\n       {'input-group': hasIcon},\r\n       {'form-group': isForm},\r\n       {'has-danger': error},\r\n       {'focused': focused},\r\n       {'has-label': label || $slots.label},\r\n       {'has-success': valid === true},\r\n       {'has-danger': valid === false}\r\n       ]\">\r\n        <slot name=\"label\">\r\n            <label v-if=\"label\" class=\"form-control-label\" :class=\"labelClasses\">\r\n                {{label}}\r\n                <span v-if=\"required\">*</span>\r\n            </label>\r\n        </slot>\r\n\r\n\r\n        <div v-if=\"addonLeftIcon || $slots.addonLeft\" class=\"input-group-prepend\">\r\n        <span class=\"input-group-text\">\r\n          <slot name=\"addonLeft\">\r\n            <i :class=\"addonLeftIcon\"></i>\r\n          </slot>\r\n        </span>\r\n        </div>\r\n        <slot v-bind=\"slotData\">\r\n            <input\r\n                    :value=\"value\"\r\n                    v-on=\"listeners\"\r\n                    v-bind=\"$attrs\"\r\n                    class=\"form-control\"\r\n                    :class=\"[\r\n                     {'is-valid': valid === true},\r\n                     {'is-invalid': valid === false}, inputClasses]\"\r\n                    aria-describedby=\"addon-right addon-left\">\r\n        </slot>\r\n        <div v-if=\"addonRightIcon || $slots.addonRight\" class=\"input-group-append\">\r\n          <span class=\"input-group-text\">\r\n              <slot name=\"addonRight\">\r\n                  <i :class=\"addonRightIcon\"></i>\r\n              </slot>\r\n          </span>\r\n        </div>\r\n        <slot name=\"infoBlock\"></slot>\r\n        <slot name=\"helpBlock\">\r\n            <div class=\"text-danger invalid-feedback font-italic\" style=\"display: block;\" :class=\"{'mt-2': hasIcon}\" v-if=\"error\">\r\n                {{ error }}\r\n            </div>\r\n        </slot>\r\n    </div>\r\n</template>\r\n<script>\r\n    export default {\r\n        inheritAttrs: false,\r\n        name: \"base-input\",\r\n        props: {\r\n            required: {\r\n                type: Boolean,\r\n                description: \"Whether input is required (adds an asterix *)\"\r\n            },\r\n            valid: {\r\n                type: Boolean,\r\n                description: \"Whether is valid\",\r\n                default: undefined\r\n            },\r\n            label: {\r\n                type: String,\r\n                description: \"Input label (text before input)\"\r\n            },\r\n            error: {\r\n                type: String,\r\n                description: \"Input error (below input)\"\r\n            },\r\n            labelClasses: {\r\n                type: String,\r\n                description: \"Input label css classes\"\r\n            },\r\n            inputClasses: {\r\n                type: String,\r\n                description: \"Input css classes\"\r\n            },\r\n            value: {\r\n                type: [String, Number],\r\n                description: \"Input value\"\r\n            },\r\n            addonRightIcon: {\r\n                type: String,\r\n                description: \"Addon right icon\"\r\n            },\r\n            addonLeftIcon: {\r\n                type: String,\r\n                description: \"Addont left icon\"\r\n            },\r\n            isForm : {\r\n                type: Boolean,\r\n                description: \"\"\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                focused: false\r\n            };\r\n        },\r\n        computed: {\r\n            listeners() {\r\n                return {\r\n                    ...this.$listeners,\r\n                    input: this.updateValue,\r\n                    focus: this.onFocus,\r\n                    blur: this.onBlur\r\n                };\r\n            },\r\n            slotData() {\r\n                return {\r\n                    focused: this.focused,\r\n                    ...this.listeners\r\n                };\r\n            },\r\n            hasIcon() {\r\n                const {addonRight, addonLeft} = this.$slots;\r\n                return (\r\n                    addonRight !== undefined ||\r\n                    addonLeft !== undefined ||\r\n                    this.addonRightIcon !== undefined ||\r\n                    this.addonLeftIcon !== undefined\r\n                );\r\n            }\r\n        },\r\n        methods: {\r\n            updateValue(evt) {\r\n                let value = evt.target.value;\r\n                this.$emit(\"input\", value);\r\n            },\r\n            onFocus(value) {\r\n                this.focused = true;\r\n                this.$emit(\"focus\", value);\r\n            },\r\n            onBlur(value) {\r\n                this.focused = false;\r\n                this.$emit(\"blur\", value);\r\n            }\r\n        }\r\n    };\r\n</script>\r\n<style>\r\n</style>\r\n"]}]}