{"remainingRequest":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\src\\views\\Login.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\src\\views\\Login.vue","mtime":1606920603980},{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport BaseComponent from \"../mixins/BaseComponent.js\";\r\nimport ValidatorUtils from \"../mixins/ValidatorUtils.js\";\r\nimport AuthService from \"../services/AuthService\";\r\n\r\nexport default {\r\n  name: \"login\",\r\n  mixins: [BaseComponent, ValidatorUtils],\r\n  data() {\r\n    return {\r\n      //Form\r\n      loginForm: true,\r\n      registerForm: false,\r\n\r\n      username: null,\r\n      password: null,\r\n      errorsLogin: {\r\n        username: {},\r\n        password: {},\r\n      },\r\n\r\n      usernameRegister: null,\r\n      passwordRegister: null,\r\n      confirmPasswordRegister: null,\r\n\r\n      errorsRegister: {\r\n        username: {},\r\n        password: {},\r\n        confirmPassword: {},\r\n      },\r\n    };\r\n  },\r\n  created() {\r\n    var username = localStorage.getItem(\"username\");\r\n    if (username) {\r\n      this.$router.push(\"/dashboard\");\r\n    } else {\r\n      this.$router.push(\"/login\");\r\n    }\r\n  },\r\n  methods: {\r\n    showLoginForm() {\r\n      this.removeErrors(this.errorsLogin);\r\n      this.username = null;\r\n      this.password = null;\r\n      this.usernameRegister = null;\r\n      this.passwordRegister = null;\r\n      this.confirmPasswordRegister = null;\r\n      this.loginForm = true;\r\n      this.registerForm = false;\r\n    },\r\n\r\n    showRegisterForm() {\r\n      this.removeErrors(this.errorsRegister);\r\n      this.username = null;\r\n      this.password = null;\r\n      this.usernameRegister = null;\r\n      this.passwordRegister = null;\r\n      this.confirmPasswordRegister = null;\r\n      this.registerForm = true;\r\n      this.loginForm = false;\r\n    },\r\n\r\n    // ------------------------------------- NORMAL LOGIN --------------------------------------------//\r\n    validateFormLogin() {\r\n      this.validateUsername();\r\n      this.validatePassword();\r\n\r\n      return !this.hasErrors(this.errorsLogin);\r\n    },\r\n\r\n    validateUsername() {\r\n      if (this.isEmpty(this.username)) {\r\n        this.addError(\r\n          \"username\",\r\n          false,\r\n          this.$i18n.t(\"login.alert_username\"),\r\n          this.errorsLogin\r\n        );\r\n      }\r\n    },\r\n\r\n    validatePassword() {\r\n      if (this.isEmpty(this.password)) {\r\n        this.addError(\r\n          \"password\",\r\n          false,\r\n          this.$i18n.t(\"login.alert_password\"),\r\n          this.errorsLogin\r\n        );\r\n      }\r\n    },\r\n\r\n    login() {\r\n      if (!this.validateFormLogin()) {\r\n        return;\r\n      }\r\n\r\n      let body = {\r\n        username: this.username,\r\n        password: this.password,\r\n      };\r\n\r\n      this.showLoading();\r\n      AuthService.login(body)\r\n        .then((response) => {\r\n          if (response.data.status == 1) {\r\n            localStorage.setItem(\"username\", response.data.username);\r\n            this.$router.push(\"/dashboard\");\r\n          } else {\r\n            this.$notify({\r\n              type: \"danger\",\r\n              message: response.data.message,\r\n            });\r\n          }\r\n        })\r\n        .catch(() => {\r\n          this.$notify({\r\n            type: \"danger\",\r\n            message: this.$i18n.t(\"common.error_connection\"),\r\n          });\r\n        })\r\n        .finally(() => {\r\n          this.hideLoading();\r\n        });\r\n    },\r\n    // ---------------------------------- END NORMAL LOGIN --------------------------------------------//\r\n\r\n    // ---------------------------------- REGISTER --------------------------------------------//\r\n    validateFormRegister() {\r\n      this.validateUsernameRegister();\r\n      this.validatePasswordRegister();\r\n      this.validateConfirmPasswordRegister();\r\n\r\n      return !this.hasErrors(this.errorsRegister);\r\n    },\r\n\r\n    validateUsernameRegister() {\r\n      if (this.isEmpty(this.usernameRegister)) {\r\n        this.addError(\r\n          \"username\",\r\n          false,\r\n          this.$i18n.t(\"login.alert_username\"),\r\n          this.errorsRegister\r\n        );\r\n      }\r\n    },\r\n\r\n    validatePasswordRegister() {\r\n      if (this.isEmpty(this.passwordRegister)) {\r\n        this.addError(\r\n          \"password\",\r\n          false,\r\n          this.$i18n.t(\"login.alert_password\"),\r\n          this.errorsRegister\r\n        );\r\n      }\r\n    },\r\n\r\n    validateConfirmPasswordRegister() {\r\n      if (this.isEmpty(this.confirmPasswordRegister)) {\r\n        this.addError(\r\n          \"confirmPassword\",\r\n          false,\r\n          \"Confirm password cannot be empty\",\r\n          this.errorsRegister\r\n        );\r\n      }\r\n      if (this.confirmPasswordRegister != this.passwordRegister) {\r\n        this.addError(\r\n          \"confirmPassword\",\r\n          false,\r\n          \"Password does not match\",\r\n          this.errorsRegister\r\n        );\r\n      }\r\n    },\r\n\r\n    register() {\r\n      if (!this.validateFormRegister()) {\r\n        return;\r\n      }\r\n\r\n      let body = {\r\n        username: this.usernameRegister,\r\n        password: this.passwordRegister,\r\n      };\r\n\r\n      this.showLoading();\r\n      AuthService.register(body)\r\n        .then((response) => {\r\n          if (response) {\r\n            if (response.data.status == 1) {\r\n              this.$notify({\r\n                type: \"success\",\r\n                message: response.data.message,\r\n              });\r\n              this.showLoginForm();\r\n            } else {\r\n              this.$notify({\r\n                type: \"danger\",\r\n                message: response.data.message,\r\n              });\r\n            }\r\n          }\r\n        })\r\n        .catch(() => {\r\n          this.$notify({\r\n            type: \"danger\",\r\n            message: this.$i18n.t(\"common.error_connection\"),\r\n          });\r\n        })\r\n        .finally(() => {\r\n          this.hideLoading();\r\n        });\r\n    },\r\n  },\r\n  watch: {\r\n    username: {\r\n      handler() {\r\n        this.removeError(\"username\", this.errorsLogin);\r\n        this.validateUsername();\r\n      },\r\n    },\r\n    password: {\r\n      handler() {\r\n        this.removeError(\"password\", this.errorsLogin);\r\n        this.validatePassword();\r\n      },\r\n    },\r\n    usernameRegister: {\r\n      handler() {\r\n        this.removeError(\"username\", this.errorsRegister);\r\n        this.validateUsernameRegister();\r\n      },\r\n    },\r\n    passwordRegister: {\r\n      handler() {\r\n        this.removeError(\"password\", this.errorsRegister);\r\n        this.validatePasswordRegister();\r\n      },\r\n    },\r\n    confirmPasswordRegister: {\r\n      handler() {\r\n        this.removeError(\"confirmPassword\", this.errorsRegister);\r\n        this.validateConfirmPasswordRegister();\r\n      },\r\n    },\r\n  },\r\n};\r\n",{"version":3,"sources":["Login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"Login.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <div class=\"row justify-content-center\">\r\n    <div class=\"col-lg-5 col-md-7\" v-if=\"loginForm\">\r\n      <div class=\"card bg-secondary shadow border-0\">\r\n        <div class=\"card-body px-lg-5 py-lg-5\">\r\n          <form>\r\n            <base-input\r\n              class=\"input-group-alternative mb-3\"\r\n              :placeholder=\"$t('login.username')\"\r\n              addon-left-icon=\"ni ni-single-02\"\r\n              v-model=\"username\"\r\n              :valid=\"errorsLogin.username.isValid\"\r\n              :error=\"errorsLogin.username.errorMessage\"\r\n            ></base-input>\r\n            <base-input\r\n              class=\"input-group-alternative\"\r\n              :placeholder=\"$t('login.password')\"\r\n              type=\"password\"\r\n              addon-left-icon=\"ni ni-lock-circle-open\"\r\n              v-model=\"password\"\r\n              :valid=\"errorsLogin.password.isValid\"\r\n              :error=\"errorsLogin.password.errorMessage\"\r\n            ></base-input>\r\n            <br />\r\n            <div class=\"text-center\">\r\n              <base-button\r\n                @click=\"login()\"\r\n                type=\"primary\"\r\n                class=\"my-2 w-100 rounded-0\"\r\n              >\r\n                {{ $t(\"login.login\") }}\r\n              </base-button>\r\n            </div>\r\n            <div class=\"col-md-12 text-right\">\r\n              <a\r\n                href=\"javascript:void(0);\"\r\n                slot=\"brand\"\r\n                class=\"font-italic text-primary\"\r\n                @click=\"showRegisterForm()\"\r\n              >\r\n                <small>Register</small>\r\n              </a>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"col-lg-5 col-md-7\" v-if=\"registerForm\">\r\n      <div class=\"card bg-secondary shadow border-0\">\r\n        <div class=\"card-body px-lg-5 py-lg-5\">\r\n          <form>\r\n            <base-input\r\n              class=\"input-group-alternative mb-3\"\r\n              :placeholder=\"$t('login.username')\"\r\n              addon-left-icon=\"ni ni-single-02\"\r\n              v-model=\"usernameRegister\"\r\n              :valid=\"errorsRegister.username.isValid\"\r\n              :error=\"errorsRegister.username.errorMessage\"\r\n            ></base-input>\r\n            <base-input\r\n              class=\"input-group-alternative mb-3\"\r\n              :placeholder=\"$t('login.password')\"\r\n              type=\"password\"\r\n              addon-left-icon=\"ni ni-lock-circle-open\"\r\n              v-model=\"passwordRegister\"\r\n              :valid=\"errorsRegister.password.isValid\"\r\n              :error=\"errorsRegister.password.errorMessage\"\r\n            ></base-input>\r\n            <base-input\r\n              class=\"input-group-alternative\"\r\n              :placeholder=\"$t('Confirm password *')\"\r\n              type=\"password\"\r\n              addon-left-icon=\"ni ni-lock-circle-open\"\r\n              v-model=\"confirmPasswordRegister\"\r\n              :valid=\"errorsRegister.confirmPassword.isValid\"\r\n              :error=\"errorsRegister.confirmPassword.errorMessage\"\r\n            ></base-input>\r\n            <br />\r\n            <div class=\"text-center\">\r\n              <base-button\r\n                @click=\"register()\"\r\n                type=\"primary\"\r\n                class=\"my-2 w-100 rounded-0\"\r\n              >\r\n                Register\r\n              </base-button>\r\n            </div>\r\n            <div class=\"col-md-12 text-right\">\r\n              <a\r\n                href=\"javascript:void(0);\"\r\n                slot=\"brand\"\r\n                class=\"font-italic text-primary\"\r\n                @click=\"showLoginForm()\"\r\n              >\r\n                <small>Return login</small>\r\n              </a>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport BaseComponent from \"../mixins/BaseComponent.js\";\r\nimport ValidatorUtils from \"../mixins/ValidatorUtils.js\";\r\nimport AuthService from \"../services/AuthService\";\r\n\r\nexport default {\r\n  name: \"login\",\r\n  mixins: [BaseComponent, ValidatorUtils],\r\n  data() {\r\n    return {\r\n      //Form\r\n      loginForm: true,\r\n      registerForm: false,\r\n\r\n      username: null,\r\n      password: null,\r\n      errorsLogin: {\r\n        username: {},\r\n        password: {},\r\n      },\r\n\r\n      usernameRegister: null,\r\n      passwordRegister: null,\r\n      confirmPasswordRegister: null,\r\n\r\n      errorsRegister: {\r\n        username: {},\r\n        password: {},\r\n        confirmPassword: {},\r\n      },\r\n    };\r\n  },\r\n  created() {\r\n    var username = localStorage.getItem(\"username\");\r\n    if (username) {\r\n      this.$router.push(\"/dashboard\");\r\n    } else {\r\n      this.$router.push(\"/login\");\r\n    }\r\n  },\r\n  methods: {\r\n    showLoginForm() {\r\n      this.removeErrors(this.errorsLogin);\r\n      this.username = null;\r\n      this.password = null;\r\n      this.usernameRegister = null;\r\n      this.passwordRegister = null;\r\n      this.confirmPasswordRegister = null;\r\n      this.loginForm = true;\r\n      this.registerForm = false;\r\n    },\r\n\r\n    showRegisterForm() {\r\n      this.removeErrors(this.errorsRegister);\r\n      this.username = null;\r\n      this.password = null;\r\n      this.usernameRegister = null;\r\n      this.passwordRegister = null;\r\n      this.confirmPasswordRegister = null;\r\n      this.registerForm = true;\r\n      this.loginForm = false;\r\n    },\r\n\r\n    // ------------------------------------- NORMAL LOGIN --------------------------------------------//\r\n    validateFormLogin() {\r\n      this.validateUsername();\r\n      this.validatePassword();\r\n\r\n      return !this.hasErrors(this.errorsLogin);\r\n    },\r\n\r\n    validateUsername() {\r\n      if (this.isEmpty(this.username)) {\r\n        this.addError(\r\n          \"username\",\r\n          false,\r\n          this.$i18n.t(\"login.alert_username\"),\r\n          this.errorsLogin\r\n        );\r\n      }\r\n    },\r\n\r\n    validatePassword() {\r\n      if (this.isEmpty(this.password)) {\r\n        this.addError(\r\n          \"password\",\r\n          false,\r\n          this.$i18n.t(\"login.alert_password\"),\r\n          this.errorsLogin\r\n        );\r\n      }\r\n    },\r\n\r\n    login() {\r\n      if (!this.validateFormLogin()) {\r\n        return;\r\n      }\r\n\r\n      let body = {\r\n        username: this.username,\r\n        password: this.password,\r\n      };\r\n\r\n      this.showLoading();\r\n      AuthService.login(body)\r\n        .then((response) => {\r\n          if (response.data.status == 1) {\r\n            localStorage.setItem(\"username\", response.data.username);\r\n            this.$router.push(\"/dashboard\");\r\n          } else {\r\n            this.$notify({\r\n              type: \"danger\",\r\n              message: response.data.message,\r\n            });\r\n          }\r\n        })\r\n        .catch(() => {\r\n          this.$notify({\r\n            type: \"danger\",\r\n            message: this.$i18n.t(\"common.error_connection\"),\r\n          });\r\n        })\r\n        .finally(() => {\r\n          this.hideLoading();\r\n        });\r\n    },\r\n    // ---------------------------------- END NORMAL LOGIN --------------------------------------------//\r\n\r\n    // ---------------------------------- REGISTER --------------------------------------------//\r\n    validateFormRegister() {\r\n      this.validateUsernameRegister();\r\n      this.validatePasswordRegister();\r\n      this.validateConfirmPasswordRegister();\r\n\r\n      return !this.hasErrors(this.errorsRegister);\r\n    },\r\n\r\n    validateUsernameRegister() {\r\n      if (this.isEmpty(this.usernameRegister)) {\r\n        this.addError(\r\n          \"username\",\r\n          false,\r\n          this.$i18n.t(\"login.alert_username\"),\r\n          this.errorsRegister\r\n        );\r\n      }\r\n    },\r\n\r\n    validatePasswordRegister() {\r\n      if (this.isEmpty(this.passwordRegister)) {\r\n        this.addError(\r\n          \"password\",\r\n          false,\r\n          this.$i18n.t(\"login.alert_password\"),\r\n          this.errorsRegister\r\n        );\r\n      }\r\n    },\r\n\r\n    validateConfirmPasswordRegister() {\r\n      if (this.isEmpty(this.confirmPasswordRegister)) {\r\n        this.addError(\r\n          \"confirmPassword\",\r\n          false,\r\n          \"Confirm password cannot be empty\",\r\n          this.errorsRegister\r\n        );\r\n      }\r\n      if (this.confirmPasswordRegister != this.passwordRegister) {\r\n        this.addError(\r\n          \"confirmPassword\",\r\n          false,\r\n          \"Password does not match\",\r\n          this.errorsRegister\r\n        );\r\n      }\r\n    },\r\n\r\n    register() {\r\n      if (!this.validateFormRegister()) {\r\n        return;\r\n      }\r\n\r\n      let body = {\r\n        username: this.usernameRegister,\r\n        password: this.passwordRegister,\r\n      };\r\n\r\n      this.showLoading();\r\n      AuthService.register(body)\r\n        .then((response) => {\r\n          if (response) {\r\n            if (response.data.status == 1) {\r\n              this.$notify({\r\n                type: \"success\",\r\n                message: response.data.message,\r\n              });\r\n              this.showLoginForm();\r\n            } else {\r\n              this.$notify({\r\n                type: \"danger\",\r\n                message: response.data.message,\r\n              });\r\n            }\r\n          }\r\n        })\r\n        .catch(() => {\r\n          this.$notify({\r\n            type: \"danger\",\r\n            message: this.$i18n.t(\"common.error_connection\"),\r\n          });\r\n        })\r\n        .finally(() => {\r\n          this.hideLoading();\r\n        });\r\n    },\r\n  },\r\n  watch: {\r\n    username: {\r\n      handler() {\r\n        this.removeError(\"username\", this.errorsLogin);\r\n        this.validateUsername();\r\n      },\r\n    },\r\n    password: {\r\n      handler() {\r\n        this.removeError(\"password\", this.errorsLogin);\r\n        this.validatePassword();\r\n      },\r\n    },\r\n    usernameRegister: {\r\n      handler() {\r\n        this.removeError(\"username\", this.errorsRegister);\r\n        this.validateUsernameRegister();\r\n      },\r\n    },\r\n    passwordRegister: {\r\n      handler() {\r\n        this.removeError(\"password\", this.errorsRegister);\r\n        this.validatePasswordRegister();\r\n      },\r\n    },\r\n    confirmPasswordRegister: {\r\n      handler() {\r\n        this.removeError(\"confirmPassword\", this.errorsRegister);\r\n        this.validateConfirmPasswordRegister();\r\n      },\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style></style>\r\n"]}]}