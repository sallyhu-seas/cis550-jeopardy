{"remainingRequest":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\src\\components\\Tabs\\Tabs.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\src\\components\\Tabs\\Tabs.vue","mtime":1606920603960},{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport PillsLayout from \"./PillsLayout\";\r\nimport TabsLayout from \"./TabsLayout\";\r\nexport default {\r\n  name: \"tabs\",\r\n  components: {\r\n    TabsLayout,\r\n    PillsLayout,\r\n    TabItemContent: {\r\n      props: [\"tab\"],\r\n      render(h) {\r\n        return h(\"div\", [this.tab.$slots.title || this.tab.title]);\r\n      }\r\n    }\r\n  },\r\n  props: {\r\n    type: {\r\n      type: String,\r\n      default: \"\",\r\n      validator: value => {\r\n        let acceptedValues = [\r\n          \"\",\r\n          \"primary\",\r\n          \"info\",\r\n          \"success\",\r\n          \"warning\",\r\n          \"danger\"\r\n        ];\r\n        return acceptedValues.indexOf(value) !== -1;\r\n      },\r\n      description: \"Tabs type (primary|info|danger|default|warning|success)\"\r\n    },\r\n    pills: {\r\n      type: Boolean,\r\n      default: true,\r\n      description: \"Whether tabs are pills\"\r\n    },\r\n    circle: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: \"Whether tabs are circle\"\r\n    },\r\n    fill: {\r\n      type: Boolean,\r\n      default: true,\r\n      description: \"Whether to fill each tab\"\r\n    },\r\n    activeTab: {\r\n      type: String,\r\n      default: \"\",\r\n      description: \"Default active tab name\"\r\n    },\r\n    tabNavWrapperClasses: {\r\n      type: [String, Object],\r\n      default: \"\",\r\n      description: \"Tab Nav wrapper (div) css classes\"\r\n    },\r\n    tabNavClasses: {\r\n      type: [String, Object],\r\n      default: \"\",\r\n      description: \"Tab Nav (ul) css classes\"\r\n    },\r\n    tabContentClasses: {\r\n      type: [String, Object],\r\n      default: \"\",\r\n      description: \"Tab content css classes\"\r\n    },\r\n    icons: {\r\n      type: Boolean,\r\n      description: \"Whether tabs should be of icon type (small no text)\"\r\n    },\r\n    centered: {\r\n      type: Boolean,\r\n      description: \"Whether tabs are centered\"\r\n    },\r\n    value: {\r\n      type: String,\r\n      description: \"Initial value (active tab)\"\r\n    }\r\n  },\r\n  provide() {\r\n    return {\r\n      addTab: this.addTab,\r\n      removeTab: this.removeTab\r\n    };\r\n  },\r\n  data() {\r\n    return {\r\n      tabs: [],\r\n      activeTabIndex: 0\r\n    };\r\n  },\r\n  computed: {\r\n    layoutComponent() {\r\n      return this.pills ? \"pills-layout\" : \"tabs-layout\";\r\n    },\r\n    slotData() {\r\n      return {\r\n        activeTabIndex: this.activeTabIndex,\r\n        tabs: this.tabs\r\n      };\r\n    }\r\n  },\r\n  methods: {\r\n    findAndActivateTab(title) {\r\n      let tabToActivate = this.tabs.find(t => t.title === title);\r\n      if (tabToActivate) {\r\n        this.activateTab(tabToActivate);\r\n      }\r\n    },\r\n    activateTab(tab) {\r\n      if (this.handleClick) {\r\n        this.handleClick(tab);\r\n      }\r\n      this.deactivateTabs();\r\n      tab.active = true;\r\n      this.activeTabIndex = this.tabs.findIndex(t => t.active);\r\n    },\r\n    deactivateTabs() {\r\n      this.tabs.forEach(tab => {\r\n        tab.active = false;\r\n      });\r\n    },\r\n    addTab(tab) {\r\n      if (this.activeTab === tab.name) {\r\n        tab.active = true;\r\n      }\r\n      this.tabs.push(tab);\r\n    },\r\n    removeTab(tab) {\r\n      const tabs = this.tabs;\r\n      const index = tabs.indexOf(tab);\r\n      if (index > -1) {\r\n        tabs.splice(index, 1);\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      if (this.value) {\r\n        this.findAndActivateTab(this.value);\r\n      } else {\r\n        if (this.tabs.length > 0) {\r\n          this.activateTab(this.tabs[0]);\r\n        }\r\n      }\r\n    });\r\n  },\r\n  watch: {\r\n    value(newVal) {\r\n      this.findAndActivateTab(newVal);\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["Tabs.vue"],"names":[],"mappingsfile":"Tabs.vue","sourceRoot":"src/components/Tabs","sourcesContent":["<template>\r\n  <component :is=\"layoutComponent\">\r\n    <template slot=\"nav\">\r\n      <div class=\"nav-wrapper\">\r\n        <ul class=\"nav\"\r\n            role=\"tablist\"\r\n            :class=\"\r\n            [type ? `nav-pills-${type}`: '',\r\n              pills ? 'nav-pills': 'nav-tabs',\r\n             {'nav-pills-icons': icons},\r\n             {'nav-fill': fill},\r\n             {'nav-pills-circle': circle},\r\n             {'justify-content-center': centered},\r\n             tabNavClasses\r\n            ]\">\r\n\r\n          <li v-for=\"tab in tabs\"\r\n              class=\"nav-item\"\r\n              :key=\"tab.id || tab.title\">\r\n\r\n            <a data-toggle=\"tab\"\r\n               role=\"tab\"\r\n               class=\"nav-link\"\r\n               :href=\"`#${tab.id || tab.title}`\"\r\n               @click.prevent=\"activateTab(tab)\"\r\n               :aria-selected=\"tab.active\"\r\n               :class=\"{active: tab.active}\">\r\n              <tab-item-content :tab=\"tab\">\r\n              </tab-item-content>\r\n            </a>\r\n\r\n          </li>\r\n\r\n        </ul>\r\n      </div>\r\n    </template>\r\n    <div slot=\"content\" class=\"tab-content\"\r\n         :class=\"[tabContentClasses]\">\r\n      <slot v-bind=\"slotData\"></slot>\r\n    </div>\r\n  </component>\r\n</template>\r\n\r\n<script>\r\nimport PillsLayout from \"./PillsLayout\";\r\nimport TabsLayout from \"./TabsLayout\";\r\nexport default {\r\n  name: \"tabs\",\r\n  components: {\r\n    TabsLayout,\r\n    PillsLayout,\r\n    TabItemContent: {\r\n      props: [\"tab\"],\r\n      render(h) {\r\n        return h(\"div\", [this.tab.$slots.title || this.tab.title]);\r\n      }\r\n    }\r\n  },\r\n  props: {\r\n    type: {\r\n      type: String,\r\n      default: \"\",\r\n      validator: value => {\r\n        let acceptedValues = [\r\n          \"\",\r\n          \"primary\",\r\n          \"info\",\r\n          \"success\",\r\n          \"warning\",\r\n          \"danger\"\r\n        ];\r\n        return acceptedValues.indexOf(value) !== -1;\r\n      },\r\n      description: \"Tabs type (primary|info|danger|default|warning|success)\"\r\n    },\r\n    pills: {\r\n      type: Boolean,\r\n      default: true,\r\n      description: \"Whether tabs are pills\"\r\n    },\r\n    circle: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: \"Whether tabs are circle\"\r\n    },\r\n    fill: {\r\n      type: Boolean,\r\n      default: true,\r\n      description: \"Whether to fill each tab\"\r\n    },\r\n    activeTab: {\r\n      type: String,\r\n      default: \"\",\r\n      description: \"Default active tab name\"\r\n    },\r\n    tabNavWrapperClasses: {\r\n      type: [String, Object],\r\n      default: \"\",\r\n      description: \"Tab Nav wrapper (div) css classes\"\r\n    },\r\n    tabNavClasses: {\r\n      type: [String, Object],\r\n      default: \"\",\r\n      description: \"Tab Nav (ul) css classes\"\r\n    },\r\n    tabContentClasses: {\r\n      type: [String, Object],\r\n      default: \"\",\r\n      description: \"Tab content css classes\"\r\n    },\r\n    icons: {\r\n      type: Boolean,\r\n      description: \"Whether tabs should be of icon type (small no text)\"\r\n    },\r\n    centered: {\r\n      type: Boolean,\r\n      description: \"Whether tabs are centered\"\r\n    },\r\n    value: {\r\n      type: String,\r\n      description: \"Initial value (active tab)\"\r\n    }\r\n  },\r\n  provide() {\r\n    return {\r\n      addTab: this.addTab,\r\n      removeTab: this.removeTab\r\n    };\r\n  },\r\n  data() {\r\n    return {\r\n      tabs: [],\r\n      activeTabIndex: 0\r\n    };\r\n  },\r\n  computed: {\r\n    layoutComponent() {\r\n      return this.pills ? \"pills-layout\" : \"tabs-layout\";\r\n    },\r\n    slotData() {\r\n      return {\r\n        activeTabIndex: this.activeTabIndex,\r\n        tabs: this.tabs\r\n      };\r\n    }\r\n  },\r\n  methods: {\r\n    findAndActivateTab(title) {\r\n      let tabToActivate = this.tabs.find(t => t.title === title);\r\n      if (tabToActivate) {\r\n        this.activateTab(tabToActivate);\r\n      }\r\n    },\r\n    activateTab(tab) {\r\n      if (this.handleClick) {\r\n        this.handleClick(tab);\r\n      }\r\n      this.deactivateTabs();\r\n      tab.active = true;\r\n      this.activeTabIndex = this.tabs.findIndex(t => t.active);\r\n    },\r\n    deactivateTabs() {\r\n      this.tabs.forEach(tab => {\r\n        tab.active = false;\r\n      });\r\n    },\r\n    addTab(tab) {\r\n      if (this.activeTab === tab.name) {\r\n        tab.active = true;\r\n      }\r\n      this.tabs.push(tab);\r\n    },\r\n    removeTab(tab) {\r\n      const tabs = this.tabs;\r\n      const index = tabs.indexOf(tab);\r\n      if (index > -1) {\r\n        tabs.splice(index, 1);\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      if (this.value) {\r\n        this.findAndActivateTab(this.value);\r\n      } else {\r\n        if (this.tabs.length > 0) {\r\n          this.activateTab(this.tabs[0]);\r\n        }\r\n      }\r\n    });\r\n  },\r\n  watch: {\r\n    value(newVal) {\r\n      this.findAndActivateTab(newVal);\r\n    }\r\n  }\r\n};\r\n</script>\r\n"]}]}