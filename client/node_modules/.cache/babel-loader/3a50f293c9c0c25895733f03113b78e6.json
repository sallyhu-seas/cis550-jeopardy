{"remainingRequest":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\src\\components\\BaseCheckbox.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\src\\components\\BaseCheckbox.vue","mtime":1606920603931},{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { randomString } from \"./stringUtils\";\nexport default {\n  name: \"base-checkbox\",\n  model: {\n    prop: \"checked\"\n  },\n  props: {\n    value: {},\n    checked: {},\n    disabled: {\n      type: Boolean,\n      description: \"Whether checkbox is disabled\"\n    },\n    inline: {\n      type: Boolean,\n      description: \"Whether checkbox is inline\"\n    }\n  },\n  data: function data() {\n    return {\n      cbId: \"\",\n      touched: false\n    };\n  },\n  computed: {\n    model: {\n      get: function get() {\n        return this.checked;\n      },\n      set: function set(check) {\n        if (!this.touched) {\n          this.touched = true;\n        }\n\n        this.$emit(\"input\", check);\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.cbId = randomString();\n  }\n};",{"version":3,"sources":["BaseCheckbox.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAsBA,SAAA,YAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,eADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,IAAA,EAAA;AADA,GAFA;AAKA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA,EADA;AAEA,IAAA,OAAA,EAAA,EAFA;AAGA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,WAAA,EAAA;AAFA,KAHA;AAOA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,WAAA,EAAA;AAFA;AAPA,GALA;AAiBA,EAAA,IAjBA,kBAiBA;AACA,WAAA;AACA,MAAA,IAAA,EAAA,EADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAAA;AAIA,GAtBA;AAuBA,EAAA,QAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,GADA,iBACA;AACA,eAAA,KAAA,OAAA;AACA,OAHA;AAIA,MAAA,GAJA,eAIA,KAJA,EAIA;AACA,YAAA,CAAA,KAAA,OAAA,EAAA;AACA,eAAA,OAAA,GAAA,IAAA;AACA;;AACA,aAAA,KAAA,CAAA,OAAA,EAAA,KAAA;AACA;AATA;AADA,GAvBA;AAoCA,EAAA,OApCA,qBAoCA;AACA,SAAA,IAAA,GAAA,YAAA,EAAA;AACA;AAtCA,CAAA","sourcesContent":["<template>\r\n  <div class=\"wapper-checkbox-custom\">\r\n    <div\r\n      class=\"custom-control custom-checkbox\"\r\n      :class=\"{'disabled': disabled, 'form-check-inline': inline}\"\r\n    >\r\n      <input\r\n        :id=\"cbId\"\r\n        class=\"custom-control-input\"\r\n        type=\"checkbox\"\r\n        :disabled=\"disabled\"\r\n        v-model=\"model\"\r\n      />\r\n      <label :for=\"cbId\" class=\"custom-control-label\">\r\n        <slot>\r\n          <span v-if=\"inline\">&nbsp;</span>\r\n        </slot>\r\n      </label>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { randomString } from \"./stringUtils\";\r\n\r\nexport default {\r\n  name: \"base-checkbox\",\r\n  model: {\r\n    prop: \"checked\",\r\n  },\r\n  props: {\r\n    value: {},\r\n    checked: {},\r\n    disabled: {\r\n      type: Boolean,\r\n      description: \"Whether checkbox is disabled\",\r\n    },\r\n    inline: {\r\n      type: Boolean,\r\n      description: \"Whether checkbox is inline\",\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      cbId: \"\",\r\n      touched: false,\r\n    };\r\n  },\r\n  computed: {\r\n    model: {\r\n      get() {\r\n        return this.checked;\r\n      },\r\n      set(check) {\r\n        if (!this.touched) {\r\n          this.touched = true;\r\n        }\r\n        this.$emit(\"input\", check);\r\n      },\r\n    },\r\n  },\r\n  mounted() {\r\n    this.cbId = randomString();\r\n  },\r\n};\r\n</script>\r\n"],"sourceRoot":"src/components"}]}