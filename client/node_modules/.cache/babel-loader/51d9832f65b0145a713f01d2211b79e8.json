{"remainingRequest":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\src\\components\\BasePagination.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\src\\components\\BasePagination.vue","mtime":1606920603936},{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"base-pagination\",\n  props: {\n    pageCount: {\n      type: Number,\n      default: 0,\n      description: \"Pagination page count. This should be specified in combination with perPage\"\n    },\n    perPage: {\n      type: Number,\n      default: 10,\n      description: \"Pagination per page. Should be specified with total or pageCount\"\n    },\n    total: {\n      type: Number,\n      default: 0,\n      description: \"Can be specified instead of pageCount. The page count in this case will be total/perPage\"\n    },\n    value: {\n      type: Number,\n      default: 1,\n      description: \"Pagination value\"\n    },\n    size: {\n      type: String,\n      default: \"\",\n      description: \"Pagination size\"\n    },\n    align: {\n      type: String,\n      default: \"\",\n      description: \"Pagination alignment (e.g center|start|end)\"\n    }\n  },\n  computed: {\n    totalPages: function totalPages() {\n      if (this.pageCount > 0) return this.pageCount;\n\n      if (this.total > 0) {\n        return Math.ceil(this.total / this.perPage);\n      }\n\n      return 1;\n    },\n    pagesToDisplay: function pagesToDisplay() {\n      if (this.totalPages > 0 && this.totalPages < this.defaultPagesToDisplay) {\n        return this.totalPages;\n      }\n\n      return this.defaultPagesToDisplay;\n    },\n    minPage: function minPage() {\n      if (this.value >= this.pagesToDisplay) {\n        var pagesToAdd = Math.floor(this.pagesToDisplay / 2);\n        var newMaxPage = pagesToAdd + this.value;\n\n        if (newMaxPage > this.totalPages) {\n          return this.totalPages - this.pagesToDisplay + 1;\n        }\n\n        return this.value - pagesToAdd;\n      } else {\n        return 1;\n      }\n    },\n    maxPage: function maxPage() {\n      if (this.value >= this.pagesToDisplay) {\n        var pagesToAdd = Math.floor(this.pagesToDisplay / 2);\n        var newMaxPage = pagesToAdd + this.value;\n\n        if (newMaxPage < this.totalPages) {\n          return newMaxPage;\n        } else {\n          return this.totalPages;\n        }\n      } else {\n        return this.pagesToDisplay;\n      }\n    }\n  },\n  data: function data() {\n    return {\n      defaultPagesToDisplay: 5\n    };\n  },\n  methods: {\n    range: function range(min, max) {\n      var arr = [];\n\n      for (var i = min; i <= max; i++) {\n        arr.push(i);\n      }\n\n      return arr;\n    },\n    changePage: function changePage(item) {\n      this.$emit(\"input\", item);\n    },\n    nextPage: function nextPage() {\n      if (this.value < this.totalPages) {\n        this.$emit(\"input\", this.value + 1);\n      }\n    },\n    prevPage: function prevPage() {\n      if (this.value > 1) {\n        this.$emit(\"input\", this.value - 1);\n      }\n    }\n  },\n  watch: {\n    perPage: function perPage() {\n      this.$emit(\"input\", 1);\n    },\n    total: function total() {\n      this.$emit(\"input\", 1);\n    }\n  }\n};",{"version":3,"sources":["BasePagination.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <ul class=\"pagination\" :class=\"[size && `pagination-${size}`, align && `justify-content-${align}`]\">\r\n    <li class=\"page-item prev-page\" :class=\"{disabled: value === 1}\">\r\n      <a class=\"page-link\" aria-label=\"Previous\" @click=\"prevPage\">\r\n        <span aria-hidden=\"true\"><i class=\"fa fa-angle-left\" aria-hidden=\"true\"></i></span>\r\n      </a>\r\n    </li>\r\n    <li class=\"page-item\" :class=\"{active: value === item}\"\r\n        :key=\"item\"\r\n        v-for=\"item in range(minPage, maxPage)\">\r\n      <a class=\"page-link\" @click=\"changePage(item)\">{{item}}</a>\r\n    </li>\r\n    <li class=\"page-item next-page\" :class=\"{disabled: value === totalPages}\">\r\n      <a class=\"page-link\" aria-label=\"Next\" @click=\"nextPage\">\r\n        <span aria-hidden=\"true\"><i class=\"fa fa-angle-right\" aria-hidden=\"true\"></i></span>\r\n      </a>\r\n    </li>\r\n  </ul>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: \"base-pagination\",\r\n  props: {\r\n    pageCount: {\r\n      type: Number,\r\n      default: 0,\r\n      description:\r\n        \"Pagination page count. This should be specified in combination with perPage\"\r\n    },\r\n    perPage: {\r\n      type: Number,\r\n      default: 10,\r\n      description:\r\n        \"Pagination per page. Should be specified with total or pageCount\"\r\n    },\r\n    total: {\r\n      type: Number,\r\n      default: 0,\r\n      description:\r\n        \"Can be specified instead of pageCount. The page count in this case will be total/perPage\"\r\n    },\r\n    value: {\r\n      type: Number,\r\n      default: 1,\r\n      description: \"Pagination value\"\r\n    },\r\n    size: {\r\n      type: String,\r\n      default: \"\",\r\n      description: \"Pagination size\"\r\n    },\r\n    align: {\r\n      type: String,\r\n      default: \"\",\r\n      description: \"Pagination alignment (e.g center|start|end)\"\r\n    }\r\n  },\r\n  computed: {\r\n    totalPages() {\r\n      if (this.pageCount > 0) return this.pageCount;\r\n      if (this.total > 0) {\r\n        return Math.ceil(this.total / this.perPage);\r\n      }\r\n      return 1;\r\n    },\r\n    pagesToDisplay() {\r\n      if (this.totalPages > 0 && this.totalPages < this.defaultPagesToDisplay) {\r\n        return this.totalPages;\r\n      }\r\n      return this.defaultPagesToDisplay;\r\n    },\r\n    minPage() {\r\n      if (this.value >= this.pagesToDisplay) {\r\n        const pagesToAdd = Math.floor(this.pagesToDisplay / 2);\r\n        const newMaxPage = pagesToAdd + this.value;\r\n        if (newMaxPage > this.totalPages) {\r\n          return this.totalPages - this.pagesToDisplay + 1;\r\n        }\r\n        return this.value - pagesToAdd;\r\n      } else {\r\n        return 1;\r\n      }\r\n    },\r\n    maxPage() {\r\n      if (this.value >= this.pagesToDisplay) {\r\n        const pagesToAdd = Math.floor(this.pagesToDisplay / 2);\r\n        const newMaxPage = pagesToAdd + this.value;\r\n        if (newMaxPage < this.totalPages) {\r\n          return newMaxPage;\r\n        } else {\r\n          return this.totalPages;\r\n        }\r\n      } else {\r\n        return this.pagesToDisplay;\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      defaultPagesToDisplay: 5\r\n    };\r\n  },\r\n  methods: {\r\n    range(min, max) {\r\n      let arr = [];\r\n      for (let i = min; i <= max; i++) {\r\n        arr.push(i);\r\n      }\r\n      return arr;\r\n    },\r\n    changePage(item) {\r\n      this.$emit(\"input\", item);\r\n    },\r\n    nextPage() {\r\n      if (this.value < this.totalPages) {\r\n        this.$emit(\"input\", this.value + 1);\r\n      }\r\n    },\r\n    prevPage() {\r\n      if (this.value > 1) {\r\n        this.$emit(\"input\", this.value - 1);\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    perPage() {\r\n      this.$emit(\"input\", 1);\r\n    },\r\n    total() {\r\n      this.$emit(\"input\", 1);\r\n    }\r\n  }\r\n};\r\n</script>\r\n"],"sourceRoot":"src/components"}]}