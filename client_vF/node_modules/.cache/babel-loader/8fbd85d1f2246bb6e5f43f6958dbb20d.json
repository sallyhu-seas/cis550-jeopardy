{"remainingRequest":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/babel-loader/lib/index.js!/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/datnguyen/Documents/GitHub/cis550project/client/src/views/Login.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/src/views/Login.vue","mtime":1606887957189},{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport BaseComponent from \"../mixins/BaseComponent.js\";\nimport ValidatorUtils from \"../mixins/ValidatorUtils.js\";\nimport AuthService from \"../services/AuthService\";\nexport default {\n  name: \"login\",\n  mixins: [BaseComponent, ValidatorUtils],\n  data: function data() {\n    return {\n      //Form\n      loginForm: true,\n      registerForm: false,\n      username: null,\n      password: null,\n      errorsLogin: {\n        username: {},\n        password: {}\n      },\n      usernameRegister: null,\n      passwordRegister: null,\n      confirmPasswordRegister: null,\n      errorsRegister: {\n        username: {},\n        password: {},\n        confirmPassword: {}\n      }\n    };\n  },\n  created: function created() {\n    var username = localStorage.getItem(\"username\");\n\n    if (username) {\n      this.$router.push(\"/dashboard\");\n    } else {\n      this.$router.push(\"/login\");\n    }\n  },\n  methods: {\n    showLoginForm: function showLoginForm() {\n      this.removeErrors(this.errorsLogin);\n      this.username = null;\n      this.password = null;\n      this.usernameRegister = null;\n      this.passwordRegister = null;\n      this.confirmPasswordRegister = null;\n      this.loginForm = true;\n      this.registerForm = false;\n    },\n    showRegisterForm: function showRegisterForm() {\n      this.removeErrors(this.errorsRegister);\n      this.username = null;\n      this.password = null;\n      this.usernameRegister = null;\n      this.passwordRegister = null;\n      this.confirmPasswordRegister = null;\n      this.registerForm = true;\n      this.loginForm = false;\n    },\n    // ------------------------------------- NORMAL LOGIN --------------------------------------------//\n    validateFormLogin: function validateFormLogin() {\n      this.validateUsername();\n      this.validatePassword();\n      return !this.hasErrors(this.errorsLogin);\n    },\n    validateUsername: function validateUsername() {\n      if (this.isEmpty(this.username)) {\n        this.addError(\"username\", false, this.$i18n.t(\"login.alert_username\"), this.errorsLogin);\n      }\n    },\n    validatePassword: function validatePassword() {\n      if (this.isEmpty(this.password)) {\n        this.addError(\"password\", false, this.$i18n.t(\"login.alert_password\"), this.errorsLogin);\n      }\n    },\n    login: function login() {\n      var _this = this;\n\n      if (!this.validateFormLogin()) {\n        return;\n      }\n\n      var body = {\n        username: this.username,\n        password: this.password\n      };\n      this.showLoading();\n      AuthService.login(body).then(function (response) {\n        if (response.data.status == 1) {\n          localStorage.setItem(\"username\", response.data.username);\n\n          _this.$router.push(\"/dashboard\");\n        } else {\n          _this.$notify({\n            type: \"danger\",\n            message: response.data.message\n          });\n        }\n      }).catch(function () {\n        _this.$notify({\n          type: \"danger\",\n          message: _this.$i18n.t(\"common.error_connection\")\n        });\n      }).finally(function () {\n        _this.hideLoading();\n      });\n    },\n    // ---------------------------------- END NORMAL LOGIN --------------------------------------------//\n    // ---------------------------------- REGISTER --------------------------------------------//\n    validateFormRegister: function validateFormRegister() {\n      this.validateUsernameRegister();\n      this.validatePasswordRegister();\n      this.validateConfirmPasswordRegister();\n      return !this.hasErrors(this.errorsRegister);\n    },\n    validateUsernameRegister: function validateUsernameRegister() {\n      if (this.isEmpty(this.usernameRegister)) {\n        this.addError(\"username\", false, this.$i18n.t(\"login.alert_username\"), this.errorsRegister);\n      }\n    },\n    validatePasswordRegister: function validatePasswordRegister() {\n      if (this.isEmpty(this.passwordRegister)) {\n        this.addError(\"password\", false, this.$i18n.t(\"login.alert_password\"), this.errorsRegister);\n      }\n    },\n    validateConfirmPasswordRegister: function validateConfirmPasswordRegister() {\n      if (this.isEmpty(this.confirmPasswordRegister)) {\n        this.addError(\"confirmPassword\", false, \"Confirm password cannot be empty\", this.errorsRegister);\n      }\n\n      if (this.confirmPasswordRegister != this.passwordRegister) {\n        this.addError(\"confirmPassword\", false, \"Password does not match\", this.errorsRegister);\n      }\n    },\n    register: function register() {\n      var _this2 = this;\n\n      if (!this.validateFormRegister()) {\n        return;\n      }\n\n      var body = {\n        username: this.usernameRegister,\n        password: this.passwordRegister\n      };\n      this.showLoading();\n      AuthService.register(body).then(function (response) {\n        if (response) {\n          if (response.data.status == 1) {\n            _this2.$notify({\n              type: \"success\",\n              message: response.data.message\n            });\n\n            _this2.showLoginForm();\n          } else {\n            _this2.$notify({\n              type: \"danger\",\n              message: response.data.message\n            });\n          }\n        }\n      }).catch(function () {\n        _this2.$notify({\n          type: \"danger\",\n          message: _this2.$i18n.t(\"common.error_connection\")\n        });\n      }).finally(function () {\n        _this2.hideLoading();\n      });\n    }\n  },\n  watch: {\n    username: {\n      handler: function handler() {\n        this.removeError(\"username\", this.errorsLogin);\n        this.validateUsername();\n      }\n    },\n    password: {\n      handler: function handler() {\n        this.removeError(\"password\", this.errorsLogin);\n        this.validatePassword();\n      }\n    },\n    usernameRegister: {\n      handler: function handler() {\n        this.removeError(\"username\", this.errorsRegister);\n        this.validateUsernameRegister();\n      }\n    },\n    passwordRegister: {\n      handler: function handler() {\n        this.removeError(\"password\", this.errorsRegister);\n        this.validatePasswordRegister();\n      }\n    },\n    confirmPasswordRegister: {\n      handler: function handler() {\n        this.removeError(\"confirmPassword\", this.errorsRegister);\n        this.validateConfirmPasswordRegister();\n      }\n    }\n  }\n};",{"version":3,"sources":["Login.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"row justify-content-center\">\n    <div class=\"col-lg-5 col-md-7\" v-if=\"loginForm\">\n      <div class=\"card bg-secondary shadow border-0\">\n        <div class=\"card-body px-lg-5 py-lg-5\">\n          <form>\n            <base-input\n              class=\"input-group-alternative mb-3\"\n              :placeholder=\"$t('login.username')\"\n              addon-left-icon=\"ni ni-single-02\"\n              v-model=\"username\"\n              :valid=\"errorsLogin.username.isValid\"\n              :error=\"errorsLogin.username.errorMessage\"\n            ></base-input>\n            <base-input\n              class=\"input-group-alternative\"\n              :placeholder=\"$t('login.password')\"\n              type=\"password\"\n              addon-left-icon=\"ni ni-lock-circle-open\"\n              v-model=\"password\"\n              :valid=\"errorsLogin.password.isValid\"\n              :error=\"errorsLogin.password.errorMessage\"\n            ></base-input>\n            <br />\n            <div class=\"text-center\">\n              <base-button\n                @click=\"login()\"\n                type=\"primary\"\n                class=\"my-2 w-100 rounded-0\"\n              >\n                {{ $t(\"login.login\") }}\n              </base-button>\n            </div>\n            <div class=\"col-md-12 text-right\">\n              <a\n                href=\"javascript:void(0);\"\n                slot=\"brand\"\n                class=\"font-italic text-primary\"\n                @click=\"showRegisterForm()\"\n              >\n                <small>Register</small>\n              </a>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-lg-5 col-md-7\" v-if=\"registerForm\">\n      <div class=\"card bg-secondary shadow border-0\">\n        <div class=\"card-body px-lg-5 py-lg-5\">\n          <form>\n            <base-input\n              class=\"input-group-alternative mb-3\"\n              :placeholder=\"$t('login.username')\"\n              addon-left-icon=\"ni ni-single-02\"\n              v-model=\"usernameRegister\"\n              :valid=\"errorsRegister.username.isValid\"\n              :error=\"errorsRegister.username.errorMessage\"\n            ></base-input>\n            <base-input\n              class=\"input-group-alternative mb-3\"\n              :placeholder=\"$t('login.password')\"\n              type=\"password\"\n              addon-left-icon=\"ni ni-lock-circle-open\"\n              v-model=\"passwordRegister\"\n              :valid=\"errorsRegister.password.isValid\"\n              :error=\"errorsRegister.password.errorMessage\"\n            ></base-input>\n            <base-input\n              class=\"input-group-alternative\"\n              :placeholder=\"$t('Confirm password *')\"\n              type=\"password\"\n              addon-left-icon=\"ni ni-lock-circle-open\"\n              v-model=\"confirmPasswordRegister\"\n              :valid=\"errorsRegister.confirmPassword.isValid\"\n              :error=\"errorsRegister.confirmPassword.errorMessage\"\n            ></base-input>\n            <br />\n            <div class=\"text-center\">\n              <base-button\n                @click=\"register()\"\n                type=\"primary\"\n                class=\"my-2 w-100 rounded-0\"\n              >\n                Register\n              </base-button>\n            </div>\n            <div class=\"col-md-12 text-right\">\n              <a\n                href=\"javascript:void(0);\"\n                slot=\"brand\"\n                class=\"font-italic text-primary\"\n                @click=\"showLoginForm()\"\n              >\n                <small>Return login</small>\n              </a>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport BaseComponent from \"../mixins/BaseComponent.js\";\nimport ValidatorUtils from \"../mixins/ValidatorUtils.js\";\nimport AuthService from \"../services/AuthService\";\n\nexport default {\n  name: \"login\",\n  mixins: [BaseComponent, ValidatorUtils],\n  data() {\n    return {\n      //Form\n      loginForm: true,\n      registerForm: false,\n\n      username: null,\n      password: null,\n      errorsLogin: {\n        username: {},\n        password: {},\n      },\n\n      usernameRegister: null,\n      passwordRegister: null,\n      confirmPasswordRegister: null,\n\n      errorsRegister: {\n        username: {},\n        password: {},\n        confirmPassword: {},\n      },\n    };\n  },\n  created() {\n    var username = localStorage.getItem(\"username\");\n    if (username) {\n      this.$router.push(\"/dashboard\");\n    } else {\n      this.$router.push(\"/login\");\n    }\n  },\n  methods: {\n    showLoginForm() {\n      this.removeErrors(this.errorsLogin);\n      this.username = null;\n      this.password = null;\n      this.usernameRegister = null;\n      this.passwordRegister = null;\n      this.confirmPasswordRegister = null;\n      this.loginForm = true;\n      this.registerForm = false;\n    },\n\n    showRegisterForm() {\n      this.removeErrors(this.errorsRegister);\n      this.username = null;\n      this.password = null;\n      this.usernameRegister = null;\n      this.passwordRegister = null;\n      this.confirmPasswordRegister = null;\n      this.registerForm = true;\n      this.loginForm = false;\n    },\n\n    // ------------------------------------- NORMAL LOGIN --------------------------------------------//\n    validateFormLogin() {\n      this.validateUsername();\n      this.validatePassword();\n\n      return !this.hasErrors(this.errorsLogin);\n    },\n\n    validateUsername() {\n      if (this.isEmpty(this.username)) {\n        this.addError(\n          \"username\",\n          false,\n          this.$i18n.t(\"login.alert_username\"),\n          this.errorsLogin\n        );\n      }\n    },\n\n    validatePassword() {\n      if (this.isEmpty(this.password)) {\n        this.addError(\n          \"password\",\n          false,\n          this.$i18n.t(\"login.alert_password\"),\n          this.errorsLogin\n        );\n      }\n    },\n\n    login() {\n      if (!this.validateFormLogin()) {\n        return;\n      }\n\n      let body = {\n        username: this.username,\n        password: this.password,\n      };\n\n      this.showLoading();\n      AuthService.login(body)\n        .then((response) => {\n          if (response.data.status == 1) {\n            localStorage.setItem(\"username\", response.data.username);\n            this.$router.push(\"/dashboard\");\n          } else {\n            this.$notify({\n              type: \"danger\",\n              message: response.data.message,\n            });\n          }\n        })\n        .catch(() => {\n          this.$notify({\n            type: \"danger\",\n            message: this.$i18n.t(\"common.error_connection\"),\n          });\n        })\n        .finally(() => {\n          this.hideLoading();\n        });\n    },\n    // ---------------------------------- END NORMAL LOGIN --------------------------------------------//\n\n    // ---------------------------------- REGISTER --------------------------------------------//\n    validateFormRegister() {\n      this.validateUsernameRegister();\n      this.validatePasswordRegister();\n      this.validateConfirmPasswordRegister();\n\n      return !this.hasErrors(this.errorsRegister);\n    },\n\n    validateUsernameRegister() {\n      if (this.isEmpty(this.usernameRegister)) {\n        this.addError(\n          \"username\",\n          false,\n          this.$i18n.t(\"login.alert_username\"),\n          this.errorsRegister\n        );\n      }\n    },\n\n    validatePasswordRegister() {\n      if (this.isEmpty(this.passwordRegister)) {\n        this.addError(\n          \"password\",\n          false,\n          this.$i18n.t(\"login.alert_password\"),\n          this.errorsRegister\n        );\n      }\n    },\n\n    validateConfirmPasswordRegister() {\n      if (this.isEmpty(this.confirmPasswordRegister)) {\n        this.addError(\n          \"confirmPassword\",\n          false,\n          \"Confirm password cannot be empty\",\n          this.errorsRegister\n        );\n      }\n      if (this.confirmPasswordRegister != this.passwordRegister) {\n        this.addError(\n          \"confirmPassword\",\n          false,\n          \"Password does not match\",\n          this.errorsRegister\n        );\n      }\n    },\n\n    register() {\n      if (!this.validateFormRegister()) {\n        return;\n      }\n\n      let body = {\n        username: this.usernameRegister,\n        password: this.passwordRegister,\n      };\n\n      this.showLoading();\n      AuthService.register(body)\n        .then((response) => {\n          if (response) {\n            if (response.data.status == 1) {\n              this.$notify({\n                type: \"success\",\n                message: response.data.message,\n              });\n              this.showLoginForm();\n            } else {\n              this.$notify({\n                type: \"danger\",\n                message: response.data.message,\n              });\n            }\n          }\n        })\n        .catch(() => {\n          this.$notify({\n            type: \"danger\",\n            message: this.$i18n.t(\"common.error_connection\"),\n          });\n        })\n        .finally(() => {\n          this.hideLoading();\n        });\n    },\n  },\n  watch: {\n    username: {\n      handler() {\n        this.removeError(\"username\", this.errorsLogin);\n        this.validateUsername();\n      },\n    },\n    password: {\n      handler() {\n        this.removeError(\"password\", this.errorsLogin);\n        this.validatePassword();\n      },\n    },\n    usernameRegister: {\n      handler() {\n        this.removeError(\"username\", this.errorsRegister);\n        this.validateUsernameRegister();\n      },\n    },\n    passwordRegister: {\n      handler() {\n        this.removeError(\"password\", this.errorsRegister);\n        this.validatePasswordRegister();\n      },\n    },\n    confirmPasswordRegister: {\n      handler() {\n        this.removeError(\"confirmPassword\", this.errorsRegister);\n        this.validateConfirmPasswordRegister();\n      },\n    },\n  },\n};\n</script>\n<style></style>\n"],"sourceRoot":"src/views"}]}