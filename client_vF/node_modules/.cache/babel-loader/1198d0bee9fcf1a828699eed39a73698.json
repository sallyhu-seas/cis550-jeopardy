{"remainingRequest":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/babel-loader/lib/index.js!/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/datnguyen/Documents/GitHub/cis550project/client/src/components/BaseCheckbox.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/src/components/BaseCheckbox.vue","mtime":1606886486769},{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { randomString } from \"./stringUtils\";\nexport default {\n  name: \"base-checkbox\",\n  model: {\n    prop: \"checked\"\n  },\n  props: {\n    value: {},\n    checked: {},\n    disabled: {\n      type: Boolean,\n      description: \"Whether checkbox is disabled\"\n    },\n    inline: {\n      type: Boolean,\n      description: \"Whether checkbox is inline\"\n    }\n  },\n  data: function data() {\n    return {\n      cbId: \"\",\n      touched: false\n    };\n  },\n  computed: {\n    model: {\n      get: function get() {\n        return this.checked;\n      },\n      set: function set(check) {\n        if (!this.touched) {\n          this.touched = true;\n        }\n\n        this.$emit(\"input\", check);\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.cbId = randomString();\n  }\n};",{"version":3,"sources":["BaseCheckbox.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAsBA,SAAA,YAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,eADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,IAAA,EAAA;AADA,GAFA;AAKA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA,EADA;AAEA,IAAA,OAAA,EAAA,EAFA;AAGA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,WAAA,EAAA;AAFA,KAHA;AAOA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,WAAA,EAAA;AAFA;AAPA,GALA;AAiBA,EAAA,IAjBA,kBAiBA;AACA,WAAA;AACA,MAAA,IAAA,EAAA,EADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAAA;AAIA,GAtBA;AAuBA,EAAA,QAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,GADA,iBACA;AACA,eAAA,KAAA,OAAA;AACA,OAHA;AAIA,MAAA,GAJA,eAIA,KAJA,EAIA;AACA,YAAA,CAAA,KAAA,OAAA,EAAA;AACA,eAAA,OAAA,GAAA,IAAA;AACA;;AACA,aAAA,KAAA,CAAA,OAAA,EAAA,KAAA;AACA;AATA;AADA,GAvBA;AAoCA,EAAA,OApCA,qBAoCA;AACA,SAAA,IAAA,GAAA,YAAA,EAAA;AACA;AAtCA,CAAA","sourcesContent":["<template>\n  <div class=\"wapper-checkbox-custom\">\n    <div\n      class=\"custom-control custom-checkbox\"\n      :class=\"{'disabled': disabled, 'form-check-inline': inline}\"\n    >\n      <input\n        :id=\"cbId\"\n        class=\"custom-control-input\"\n        type=\"checkbox\"\n        :disabled=\"disabled\"\n        v-model=\"model\"\n      />\n      <label :for=\"cbId\" class=\"custom-control-label\">\n        <slot>\n          <span v-if=\"inline\">&nbsp;</span>\n        </slot>\n      </label>\n    </div>\n  </div>\n</template>\n<script>\nimport { randomString } from \"./stringUtils\";\n\nexport default {\n  name: \"base-checkbox\",\n  model: {\n    prop: \"checked\",\n  },\n  props: {\n    value: {},\n    checked: {},\n    disabled: {\n      type: Boolean,\n      description: \"Whether checkbox is disabled\",\n    },\n    inline: {\n      type: Boolean,\n      description: \"Whether checkbox is inline\",\n    },\n  },\n  data() {\n    return {\n      cbId: \"\",\n      touched: false,\n    };\n  },\n  computed: {\n    model: {\n      get() {\n        return this.checked;\n      },\n      set(check) {\n        if (!this.touched) {\n          this.touched = true;\n        }\n        this.$emit(\"input\", check);\n      },\n    },\n  },\n  mounted() {\n    this.cbId = randomString();\n  },\n};\n</script>\n"],"sourceRoot":"src/components"}]}