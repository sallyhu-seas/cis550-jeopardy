{"remainingRequest":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/babel-loader/lib/index.js!/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/datnguyen/Documents/GitHub/cis550project/client/src/views/Question.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/src/views/Question.vue","mtime":1606886486786},{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport BarChart from \"@/components/Charts/BarChart\";\nimport QuestionService from \"../services/QuestionService.js\";\nexport default {\n  components: {\n    BarChart: BarChart\n  },\n  data: function data() {\n    return {\n      category: {\n        chartData: {}\n      },\n      answer: {\n        chartData: {}\n      },\n      categoryText: \"\",\n      answerText: \"\"\n    };\n  },\n  created: function created() {\n    this.getConfigurations();\n    this.getQuestionsByCategory();\n    this.getQuestionsByAnswer();\n  },\n  methods: {\n    getQuestionsByCategory: function getQuestionsByCategory() {\n      var _this = this;\n\n      var params = {\n        take: 20\n      };\n      QuestionService.getTopQuestionsByCategory(params).then(function (response) {\n        if (response) {\n          var labels = [];\n          var data = [];\n\n          for (var i = 0; i < response.data.list.length; i++) {\n            labels.push(response.data.list[i].category);\n            data.push(response.data.list[i].totalQuestions);\n          }\n\n          _this.category = {\n            chartData: {\n              labels: labels,\n              datasets: [{\n                label: \"Questions\",\n                data: data\n              }]\n            }\n          };\n        }\n      }).catch(function () {});\n    },\n    getQuestionsByAnswer: function getQuestionsByAnswer() {\n      var _this2 = this;\n\n      var params = {\n        take: 20\n      };\n      QuestionService.getTopQuestionsByAnswer(params).then(function (response) {\n        if (response) {\n          var labels = [];\n          var data = [];\n\n          for (var i = 0; i < response.data.list.length; i++) {\n            labels.push(response.data.list[i].answer);\n            data.push(response.data.list[i].totalQuestions);\n          }\n\n          _this2.answer = {\n            chartData: {\n              labels: labels,\n              datasets: [{\n                label: \"Questions\",\n                data: data\n              }]\n            }\n          };\n        }\n      }).catch(function () {});\n    },\n    getConfigurations: function getConfigurations() {\n      var _this3 = this;\n\n      QuestionService.getConfigurations().then(function (response) {\n        if (response) {\n          for (var i = 0; i < response.data.list.length; i++) {\n            if (response.data.list[i].code == \"QUESTION-CATEGORY\") {\n              _this3.categoryText = response.data.list[i].value;\n            }\n\n            if (response.data.list[i].code == \"QUESTION-ANSWER\") {\n              _this3.answerText = response.data.list[i].value;\n            }\n          }\n        }\n      }).catch(function () {});\n    }\n  }\n};",{"version":3,"sources":["Question.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"container-fluid\">\n    <div class=\"row ml-0 mr-0 bg-banner\" style=\"height: 500px\"></div>\n\n    <div class=\"row ml-0 mr-0\">\n      <div class=\"col-md-12 mt-2 mb-2\">\n        <h3>{{ categoryText }}</h3>\n\n        <card header-classes=\"bg-transparent pt-3\">\n          <div slot=\"header\" class=\"row align-items-center\">\n            <div class=\"col\">\n              <h6 class=\"text-uppercase text-muted ls-1 mb-1\">Category</h6>\n              <h5 class=\"h3 mb-0\">Total questions</h5>\n            </div>\n          </div>\n\n          <bar-chart\n            :height=\"350\"\n            ref=\"barChart\"\n            :chart-data=\"category.chartData\"\n          >\n          </bar-chart>\n        </card>\n      </div>\n\n      <div class=\"col-md-12 mt-2 mb-2\">\n        <h3>{{ answerText }}</h3>\n\n        <card header-classes=\"bg-transparent pt-3\">\n          <div slot=\"header\" class=\"row align-items-center\">\n            <div class=\"col\">\n              <h6 class=\"text-uppercase text-muted ls-1 mb-1\">Answer</h6>\n              <h5 class=\"h3 mb-0\">Total questions</h5>\n            </div>\n          </div>\n\n          <bar-chart\n            :height=\"350\"\n            ref=\"barChart\"\n            :chart-data=\"answer.chartData\"\n          >\n          </bar-chart>\n        </card>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport BarChart from \"@/components/Charts/BarChart\";\nimport QuestionService from \"../services/QuestionService.js\";\n\nexport default {\n  components: {\n    BarChart,\n  },\n  data() {\n    return {\n      category: {\n        chartData: {},\n      },\n      answer: {\n        chartData: {},\n      },\n      categoryText: \"\",\n      answerText: \"\",\n    };\n  },\n  created() {\n    this.getConfigurations();\n    this.getQuestionsByCategory();\n    this.getQuestionsByAnswer();\n  },\n  methods: {\n    getQuestionsByCategory() {\n      let params = {\n        take: 20,\n      };\n\n      QuestionService.getTopQuestionsByCategory(params)\n        .then((response) => {\n          if (response) {\n            let labels = [];\n            let data = [];\n\n            for (let i = 0; i < response.data.list.length; i++) {\n              labels.push(response.data.list[i].category);\n              data.push(response.data.list[i].totalQuestions);\n            }\n\n            this.category = {\n              chartData: {\n                labels: labels,\n                datasets: [\n                  {\n                    label: \"Questions\",\n                    data: data,\n                  },\n                ],\n              },\n            };\n          }\n        })\n        .catch(() => {});\n    },\n\n    getQuestionsByAnswer() {\n      let params = {\n        take: 20,\n      };\n\n      QuestionService.getTopQuestionsByAnswer(params)\n        .then((response) => {\n          if (response) {\n            let labels = [];\n            let data = [];\n\n            for (let i = 0; i < response.data.list.length; i++) {\n              labels.push(response.data.list[i].answer);\n              data.push(response.data.list[i].totalQuestions);\n            }\n\n            this.answer = {\n              chartData: {\n                labels: labels,\n                datasets: [\n                  {\n                    label: \"Questions\",\n                    data: data,\n                  },\n                ],\n              },\n            };\n          }\n        })\n        .catch(() => {});\n    },\n\n    getConfigurations() {\n      QuestionService.getConfigurations()\n        .then((response) => {\n          if (response) {\n            for (let i = 0; i < response.data.list.length; i++) {\n              if (response.data.list[i].code == \"QUESTION-CATEGORY\") {\n                this.categoryText = response.data.list[i].value;\n              }\n              if (response.data.list[i].code == \"QUESTION-ANSWER\") {\n                this.answerText = response.data.list[i].value;\n              }\n            }\n          }\n        })\n        .catch(() => {});\n    },\n  },\n};\n</script>\n<style></style>\n"],"sourceRoot":"src/views"}]}