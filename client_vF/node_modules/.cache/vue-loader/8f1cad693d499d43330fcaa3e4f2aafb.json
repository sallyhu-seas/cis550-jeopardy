{"remainingRequest":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\src\\components\\BasePagination.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\src\\components\\BasePagination.vue","mtime":1606920603936},{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  name: \"base-pagination\",\r\n  props: {\r\n    pageCount: {\r\n      type: Number,\r\n      default: 0,\r\n      description:\r\n        \"Pagination page count. This should be specified in combination with perPage\"\r\n    },\r\n    perPage: {\r\n      type: Number,\r\n      default: 10,\r\n      description:\r\n        \"Pagination per page. Should be specified with total or pageCount\"\r\n    },\r\n    total: {\r\n      type: Number,\r\n      default: 0,\r\n      description:\r\n        \"Can be specified instead of pageCount. The page count in this case will be total/perPage\"\r\n    },\r\n    value: {\r\n      type: Number,\r\n      default: 1,\r\n      description: \"Pagination value\"\r\n    },\r\n    size: {\r\n      type: String,\r\n      default: \"\",\r\n      description: \"Pagination size\"\r\n    },\r\n    align: {\r\n      type: String,\r\n      default: \"\",\r\n      description: \"Pagination alignment (e.g center|start|end)\"\r\n    }\r\n  },\r\n  computed: {\r\n    totalPages() {\r\n      if (this.pageCount > 0) return this.pageCount;\r\n      if (this.total > 0) {\r\n        return Math.ceil(this.total / this.perPage);\r\n      }\r\n      return 1;\r\n    },\r\n    pagesToDisplay() {\r\n      if (this.totalPages > 0 && this.totalPages < this.defaultPagesToDisplay) {\r\n        return this.totalPages;\r\n      }\r\n      return this.defaultPagesToDisplay;\r\n    },\r\n    minPage() {\r\n      if (this.value >= this.pagesToDisplay) {\r\n        const pagesToAdd = Math.floor(this.pagesToDisplay / 2);\r\n        const newMaxPage = pagesToAdd + this.value;\r\n        if (newMaxPage > this.totalPages) {\r\n          return this.totalPages - this.pagesToDisplay + 1;\r\n        }\r\n        return this.value - pagesToAdd;\r\n      } else {\r\n        return 1;\r\n      }\r\n    },\r\n    maxPage() {\r\n      if (this.value >= this.pagesToDisplay) {\r\n        const pagesToAdd = Math.floor(this.pagesToDisplay / 2);\r\n        const newMaxPage = pagesToAdd + this.value;\r\n        if (newMaxPage < this.totalPages) {\r\n          return newMaxPage;\r\n        } else {\r\n          return this.totalPages;\r\n        }\r\n      } else {\r\n        return this.pagesToDisplay;\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      defaultPagesToDisplay: 5\r\n    };\r\n  },\r\n  methods: {\r\n    range(min, max) {\r\n      let arr = [];\r\n      for (let i = min; i <= max; i++) {\r\n        arr.push(i);\r\n      }\r\n      return arr;\r\n    },\r\n    changePage(item) {\r\n      this.$emit(\"input\", item);\r\n    },\r\n    nextPage() {\r\n      if (this.value < this.totalPages) {\r\n        this.$emit(\"input\", this.value + 1);\r\n      }\r\n    },\r\n    prevPage() {\r\n      if (this.value > 1) {\r\n        this.$emit(\"input\", this.value - 1);\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    perPage() {\r\n      this.$emit(\"input\", 1);\r\n    },\r\n    total() {\r\n      this.$emit(\"input\", 1);\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["BasePagination.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAofile":"BasePagination.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <ul class=\"pagination\" :class=\"[size && `pagination-${size}`, align && `justify-content-${align}`]\">\r\n    <li class=\"page-item prev-page\" :class=\"{disabled: value === 1}\">\r\n      <a class=\"page-link\" aria-label=\"Previous\" @click=\"prevPage\">\r\n        <span aria-hidden=\"true\"><i class=\"fa fa-angle-left\" aria-hidden=\"true\"></i></span>\r\n      </a>\r\n    </li>\r\n    <li class=\"page-item\" :class=\"{active: value === item}\"\r\n        :key=\"item\"\r\n        v-for=\"item in range(minPage, maxPage)\">\r\n      <a class=\"page-link\" @click=\"changePage(item)\">{{item}}</a>\r\n    </li>\r\n    <li class=\"page-item next-page\" :class=\"{disabled: value === totalPages}\">\r\n      <a class=\"page-link\" aria-label=\"Next\" @click=\"nextPage\">\r\n        <span aria-hidden=\"true\"><i class=\"fa fa-angle-right\" aria-hidden=\"true\"></i></span>\r\n      </a>\r\n    </li>\r\n  </ul>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: \"base-pagination\",\r\n  props: {\r\n    pageCount: {\r\n      type: Number,\r\n      default: 0,\r\n      description:\r\n        \"Pagination page count. This should be specified in combination with perPage\"\r\n    },\r\n    perPage: {\r\n      type: Number,\r\n      default: 10,\r\n      description:\r\n        \"Pagination per page. Should be specified with total or pageCount\"\r\n    },\r\n    total: {\r\n      type: Number,\r\n      default: 0,\r\n      description:\r\n        \"Can be specified instead of pageCount. The page count in this case will be total/perPage\"\r\n    },\r\n    value: {\r\n      type: Number,\r\n      default: 1,\r\n      description: \"Pagination value\"\r\n    },\r\n    size: {\r\n      type: String,\r\n      default: \"\",\r\n      description: \"Pagination size\"\r\n    },\r\n    align: {\r\n      type: String,\r\n      default: \"\",\r\n      description: \"Pagination alignment (e.g center|start|end)\"\r\n    }\r\n  },\r\n  computed: {\r\n    totalPages() {\r\n      if (this.pageCount > 0) return this.pageCount;\r\n      if (this.total > 0) {\r\n        return Math.ceil(this.total / this.perPage);\r\n      }\r\n      return 1;\r\n    },\r\n    pagesToDisplay() {\r\n      if (this.totalPages > 0 && this.totalPages < this.defaultPagesToDisplay) {\r\n        return this.totalPages;\r\n      }\r\n      return this.defaultPagesToDisplay;\r\n    },\r\n    minPage() {\r\n      if (this.value >= this.pagesToDisplay) {\r\n        const pagesToAdd = Math.floor(this.pagesToDisplay / 2);\r\n        const newMaxPage = pagesToAdd + this.value;\r\n        if (newMaxPage > this.totalPages) {\r\n          return this.totalPages - this.pagesToDisplay + 1;\r\n        }\r\n        return this.value - pagesToAdd;\r\n      } else {\r\n        return 1;\r\n      }\r\n    },\r\n    maxPage() {\r\n      if (this.value >= this.pagesToDisplay) {\r\n        const pagesToAdd = Math.floor(this.pagesToDisplay / 2);\r\n        const newMaxPage = pagesToAdd + this.value;\r\n        if (newMaxPage < this.totalPages) {\r\n          return newMaxPage;\r\n        } else {\r\n          return this.totalPages;\r\n        }\r\n      } else {\r\n        return this.pagesToDisplay;\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      defaultPagesToDisplay: 5\r\n    };\r\n  },\r\n  methods: {\r\n    range(min, max) {\r\n      let arr = [];\r\n      for (let i = min; i <= max; i++) {\r\n        arr.push(i);\r\n      }\r\n      return arr;\r\n    },\r\n    changePage(item) {\r\n      this.$emit(\"input\", item);\r\n    },\r\n    nextPage() {\r\n      if (this.value < this.totalPages) {\r\n        this.$emit(\"input\", this.value + 1);\r\n      }\r\n    },\r\n    prevPage() {\r\n      if (this.value > 1) {\r\n        this.$emit(\"input\", this.value - 1);\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    perPage() {\r\n      this.$emit(\"input\", 1);\r\n    },\r\n    total() {\r\n      this.$emit(\"input\", 1);\r\n    }\r\n  }\r\n};\r\n</script>\r\n"]}]}