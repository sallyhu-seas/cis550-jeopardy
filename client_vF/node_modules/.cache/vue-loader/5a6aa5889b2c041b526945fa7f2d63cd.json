{"remainingRequest":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/datnguyen/Documents/GitHub/cis550project/client/src/views/Play.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/src/views/Play.vue","mtime":1606888434517},{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport BaseComponent from \"../mixins/BaseComponent.js\";\nimport DateUtils from \"../mixins/DateUtils.js\";\nimport PlayService from \"../services/PlayService.js\";\n\nexport default {\n  name: \"play\",\n  mixins: [BaseComponent, DateUtils],\n  data() {\n    return {\n      listSeasons: [],\n      listAirDates: [{}],\n      listRounds: [\n        { name: \"Jeopardy!\" },\n        { name: \"Double Jeopardy!\" },\n        { name: \"Final Jeopardy!\" },\n      ],\n      seasonSearch: null,\n      airDateSearch: null,\n      roundSearch: null,\n      question: \"\",\n      data: [],\n      isClickStart: false,\n      isChooseQuestion: true,\n      isDisplayOverride: false,\n      times: 3,\n      answer: \"\",\n      value: 0,\n      score: 0,\n      id: null,\n      trueAnswer: \"\",\n    };\n  },\n  created() {\n    this.getListSeasons();\n  },\n  methods: {\n    getListSeasons() {\n      for (let i = 37; i >= 1; i--) {\n        this.listSeasons.push({\n          id: i,\n          name: \"Season \" + i,\n        });\n      }\n    },\n\n    getListAirDates() {\n      this.listAirDates = [{}];\n      this.airDateSearch = null;\n\n      let params = {\n        season: this.seasonSearch,\n      };\n\n      PlayService.getListAirDates(params)\n        .then((response) => {\n          if (response) {\n            this.listAirDates = [];\n            for (let i = 0; i < response.data.list.length; i++) {\n              this.listAirDates.push({\n                id: response.data.list[i].showNum,\n                name: this.convertDateDbToDateClient(\n                  response.data.list[i].airDate\n                ),\n              });\n            }\n          }\n        })\n        .catch(() => {\n          this.listAirDates = [{}];\n        });\n    },\n\n    submit() {\n      if (this.isChooseQuestion) {\n        this.$notify({\n          type: \"danger\",\n          message: \"Please choose the question\",\n        });\n        return;\n      }\n\n      let body = {\n        id: this.id,\n        answer: this.answer,\n      };\n\n      PlayService.checkAnswer(body)\n        .then((response) => {\n          if (response) {\n            if (response.data.status == 1) {\n              this.$notify({\n                type: \"success\",\n                message: response.data.message,\n              });\n              this.score += this.value;\n              this.isDisplayOverride = false;\n            } else {\n              this.$notify({\n                type: \"danger\",\n                message: response.data.message,\n              });\n              this.score -= this.value;\n              this.isDisplayOverride = true;\n            }\n            this.trueAnswer = response.data.answer;\n            this.isChooseQuestion = true;\n          }\n        })\n        .catch(() => {\n          this.listAirDates = [{}];\n        });\n    },\n\n    pass() {\n      if (this.isChooseQuestion) {\n        this.$notify({\n          type: \"danger\",\n          message: \"Please choose the question\",\n        });\n        return;\n      }\n\n      this.isChooseQuestion = true;\n      this.score -= this.value;\n    },\n\n    override() {\n      this.score += this.value * 2;\n      this.times--;\n      this.isDisplayOverride = false;\n    },\n\n    start() {\n      if (\n        this.seasonSearch == null ||\n        this.airDateSearch == null ||\n        this.roundSearch == null\n      ) {\n        this.$notify({\n          type: \"danger\",\n          message: \"Please fill the information\",\n        });\n        return;\n      }\n\n      let params = {\n        showNum: this.airDateSearch,\n        round: this.roundSearch,\n      };\n\n      PlayService.getQuestions(params)\n        .then((response) => {\n          var result = response.data.list;\n          this.data = this.groupBy(result, function(item) {\n            return [item.category];\n          });\n\n          this.isClickStart = true;\n          this.question = null;\n          this.value = null;\n          this.isChooseQuestion = true;\n          this.isDisplayOverride = false;\n          this.times = 3;\n          this.answer = \"\";\n          this.value = 0;\n          this.score = 0;\n          this.id = null;\n        })\n        .catch(() => {});\n    },\n\n    groupBy(array, f) {\n      var fields = {};\n      array.forEach(function(o) {\n        o.isClick = false;\n        var field = JSON.stringify(f(o));\n        fields[field] = fields[field] || [];\n        fields[field].push(o);\n      });\n\n      return Object.keys(fields).map(function(field) {\n        var json = JSON.parse(field);\n        var catName = json[0];\n\n        return {\n          catName: catName,\n          questions: fields[field],\n        };\n      });\n    },\n\n    clickQuestion(item) {\n      if (item.isClick) return;\n      if (!this.isChooseQuestion) {\n        this.$notify({\n          type: \"danger\",\n          message: \"Please submit or pass the question\",\n        });\n        return;\n      }\n\n      this.answer = \"\";\n      this.isDisplayOverride = false;\n      this.isChooseQuestion = false;\n      item.isClick = true;\n      this.question = item.question;\n      this.value = item.value;\n      this.id = item.id;\n    },\n  },\n};\n",{"version":3,"sources":["Play.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"Play.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div\n    class=\"container-fluid\"\n    style=\"background-color: rgb(0, 31, 146); height: 94vh; width: 100%\"\n  >\n    <div class=\"col-12 pt-4\" style=\"text-align: center\">\n      <div v-if=\"!isClickStart\">\n        <h2 class=\"color-white\">Let's Play Jeopardy!</h2>\n        <h4 class=\"color-white\">\n          Choose a Season, Airdate, and Round to Start\n        </h4>\n      </div>\n      <div class=\"row mt-4\">\n        <div class=\"col-3\"></div>\n        <div class=\"col-6 row\">\n          <div class=\"col-3\">\n            <diV class=\"form-group-row\">\n              <el-select\n                class=\"select-danger select-custom font-italic col-sm-12 rounded-0\"\n                v-model=\"seasonSearch\"\n                :placeholder=\"'Season'\"\n                :clearable=\"true\"\n                :filterable=\"true\"\n                @change=\"getListAirDates()\"\n              >\n                <el-option\n                  v-for=\"item in listSeasons\"\n                  class=\"select-danger\"\n                  :value=\"item.id\"\n                  :label=\"item.name\"\n                  :key=\"item.id\"\n                ></el-option>\n              </el-select>\n            </diV>\n          </div>\n          <div class=\"col-3\">\n            <diV class=\"form-group-row\">\n              <el-select\n                class=\"select-danger select-custom font-italic col-sm-12 rounded-0\"\n                v-model=\"airDateSearch\"\n                :placeholder=\"'Airdate'\"\n                :clearable=\"true\"\n                :filterable=\"true\"\n              >\n                <el-option\n                  v-for=\"item in listAirDates\"\n                  class=\"select-danger\"\n                  :value=\"item.id\"\n                  :label=\"item.name\"\n                  :key=\"item.id\"\n                ></el-option>\n              </el-select>\n            </diV>\n          </div>\n          <div class=\"col-3\">\n            <diV class=\"form-group-row\">\n              <el-select\n                class=\"select-danger select-custom font-italic col-sm-12 rounded-0\"\n                v-model=\"roundSearch\"\n                :placeholder=\"'Round'\"\n                :clearable=\"true\"\n                :filterable=\"true\"\n              >\n                <el-option\n                  v-for=\"item in listRounds\"\n                  class=\"select-danger\"\n                  :value=\"item.name\"\n                  :label=\"item.name\"\n                  :key=\"item.name\"\n                ></el-option>\n              </el-select>\n            </diV>\n          </div>\n          <div class=\"col-3\">\n            <base-button\n              type=\"primary\"\n              style=\"\n              width: 100px;\n              background-color: #eb7a04 !important;\n              color: black !important;\n            \"\n              @click=\"start()\"\n              class=\"border-0 btn-custom color-white\"\n              >Let's Go!</base-button\n            >\n          </div>\n        </div>\n      </div>\n    </div>\n    <br />\n    <div class=\"row ml-0 mr-0\" v-if=\"isClickStart\">\n      <div class=\"col-2\"></div>\n      <div class=\"col-8\" style=\"background-color: black; height: 435px\">\n        <div class=\"row\">\n          <div\n            class=\"col-2 p-2 mr-0 ml-0\"\n            v-for=\"(item, index) in data\"\n            :key=\"index\"\n          >\n            <div class=\"col-12\">\n              <div class=\"box\">{{ item.catName }}</div>\n            </div>\n            <br />\n            <div v-for=\"(question, index2) in item.questions\" :key=\"index2\">\n              <div\n                class=\"col-12\"\n                @click=\"clickQuestion(question)\"\n                :class=\"{ disable: question.isClick }\"\n              >\n                <div class=\"box-value\">$ {{ question.value }}</div>\n                <br />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <br />\n    <div style=\"text-align: center\" v-if=\"isClickStart\">\n      <h2 class=\"pt-3 pl-3 color-white\" style=\"height: 80px\">\n        {{ question }}\n      </h2>\n      <br />\n\n      <div class=\"color-white ml-2\" v-if=\"isDisplayOverride && times > 0\">\n        Your answer, <span class=\"font-weight-bold\">{{ answer }}</span> was\n        incorrect. The correct answer was:\n        <span class=\"font-weight-bold\">{{ trueAnswer }}</span\n        >. If your answer is actually correct, please click the\n        <span class=\"font-weight-bold\">OVERRIDE</span> button below. You lost\n        <span class=\"font-weight-bold\">{{ value }}</span> points. Pick a new\n        question when you're ready.\n      </div>\n      <base-button\n        v-if=\"isDisplayOverride && times > 0\"\n        type=\"primary\"\n        style=\"\n          min-width: 120px;\n          background-color: #eb7a04 !important;\n          color: black !important;\n        \"\n        @click=\"override()\"\n        class=\"border-0 btn-custom color-white ml-2\"\n        >Override ({{ times }})</base-button\n      >\n      <br />\n      <div class=\"col-12 row\">\n        <div class=\"col-md-5\"></div>\n        <div class=\"col-md-2 text-center\">\n          <h3 class=\"color-white\">Score: {{ score }}</h3>\n        </div>\n        <div class=\"col-md-5\"></div>\n        <div class=\"col-md-5\"></div>\n        <div class=\"col-md-2\">\n          <base-input\n            class=\"input-group-alternative\"\n            placeholder=\"Enter your answer\"\n            v-model=\"answer\"\n          ></base-input>\n          <br />\n        </div>\n        <div class=\"col-md-5\"></div>\n        <div class=\"col-md-4\"></div>\n        <div class=\"col-md-4 text-center\">\n          <base-button\n            type=\"primary\"\n            style=\"\n              min-width: 120px;\n              background-color: #eb7a04 !important;\n              color: black !important;\n            \"\n            @click=\"submit()\"\n            class=\"border-0 btn-custom color-white\"\n            >Submit</base-button\n          >\n          <base-button\n            type=\"primary\"\n            style=\"\n              min-width: 120px;\n              background-color: #eb7a04 !important;\n              color: black !important;\n            \"\n            @click=\"pass()\"\n            class=\"border-0 btn-custom color-white\"\n            >Pass</base-button\n          >\n        </div>\n        <div class=\"col-md-4\"></div>\n      </div>\n    </div>\n    <br />\n  </div>\n</template>\n<script>\nimport BaseComponent from \"../mixins/BaseComponent.js\";\nimport DateUtils from \"../mixins/DateUtils.js\";\nimport PlayService from \"../services/PlayService.js\";\n\nexport default {\n  name: \"play\",\n  mixins: [BaseComponent, DateUtils],\n  data() {\n    return {\n      listSeasons: [],\n      listAirDates: [{}],\n      listRounds: [\n        { name: \"Jeopardy!\" },\n        { name: \"Double Jeopardy!\" },\n        { name: \"Final Jeopardy!\" },\n      ],\n      seasonSearch: null,\n      airDateSearch: null,\n      roundSearch: null,\n      question: \"\",\n      data: [],\n      isClickStart: false,\n      isChooseQuestion: true,\n      isDisplayOverride: false,\n      times: 3,\n      answer: \"\",\n      value: 0,\n      score: 0,\n      id: null,\n      trueAnswer: \"\",\n    };\n  },\n  created() {\n    this.getListSeasons();\n  },\n  methods: {\n    getListSeasons() {\n      for (let i = 37; i >= 1; i--) {\n        this.listSeasons.push({\n          id: i,\n          name: \"Season \" + i,\n        });\n      }\n    },\n\n    getListAirDates() {\n      this.listAirDates = [{}];\n      this.airDateSearch = null;\n\n      let params = {\n        season: this.seasonSearch,\n      };\n\n      PlayService.getListAirDates(params)\n        .then((response) => {\n          if (response) {\n            this.listAirDates = [];\n            for (let i = 0; i < response.data.list.length; i++) {\n              this.listAirDates.push({\n                id: response.data.list[i].showNum,\n                name: this.convertDateDbToDateClient(\n                  response.data.list[i].airDate\n                ),\n              });\n            }\n          }\n        })\n        .catch(() => {\n          this.listAirDates = [{}];\n        });\n    },\n\n    submit() {\n      if (this.isChooseQuestion) {\n        this.$notify({\n          type: \"danger\",\n          message: \"Please choose the question\",\n        });\n        return;\n      }\n\n      let body = {\n        id: this.id,\n        answer: this.answer,\n      };\n\n      PlayService.checkAnswer(body)\n        .then((response) => {\n          if (response) {\n            if (response.data.status == 1) {\n              this.$notify({\n                type: \"success\",\n                message: response.data.message,\n              });\n              this.score += this.value;\n              this.isDisplayOverride = false;\n            } else {\n              this.$notify({\n                type: \"danger\",\n                message: response.data.message,\n              });\n              this.score -= this.value;\n              this.isDisplayOverride = true;\n            }\n            this.trueAnswer = response.data.answer;\n            this.isChooseQuestion = true;\n          }\n        })\n        .catch(() => {\n          this.listAirDates = [{}];\n        });\n    },\n\n    pass() {\n      if (this.isChooseQuestion) {\n        this.$notify({\n          type: \"danger\",\n          message: \"Please choose the question\",\n        });\n        return;\n      }\n\n      this.isChooseQuestion = true;\n      this.score -= this.value;\n    },\n\n    override() {\n      this.score += this.value * 2;\n      this.times--;\n      this.isDisplayOverride = false;\n    },\n\n    start() {\n      if (\n        this.seasonSearch == null ||\n        this.airDateSearch == null ||\n        this.roundSearch == null\n      ) {\n        this.$notify({\n          type: \"danger\",\n          message: \"Please fill the information\",\n        });\n        return;\n      }\n\n      let params = {\n        showNum: this.airDateSearch,\n        round: this.roundSearch,\n      };\n\n      PlayService.getQuestions(params)\n        .then((response) => {\n          var result = response.data.list;\n          this.data = this.groupBy(result, function(item) {\n            return [item.category];\n          });\n\n          this.isClickStart = true;\n          this.question = null;\n          this.value = null;\n          this.isChooseQuestion = true;\n          this.isDisplayOverride = false;\n          this.times = 3;\n          this.answer = \"\";\n          this.value = 0;\n          this.score = 0;\n          this.id = null;\n        })\n        .catch(() => {});\n    },\n\n    groupBy(array, f) {\n      var fields = {};\n      array.forEach(function(o) {\n        o.isClick = false;\n        var field = JSON.stringify(f(o));\n        fields[field] = fields[field] || [];\n        fields[field].push(o);\n      });\n\n      return Object.keys(fields).map(function(field) {\n        var json = JSON.parse(field);\n        var catName = json[0];\n\n        return {\n          catName: catName,\n          questions: fields[field],\n        };\n      });\n    },\n\n    clickQuestion(item) {\n      if (item.isClick) return;\n      if (!this.isChooseQuestion) {\n        this.$notify({\n          type: \"danger\",\n          message: \"Please submit or pass the question\",\n        });\n        return;\n      }\n\n      this.answer = \"\";\n      this.isDisplayOverride = false;\n      this.isChooseQuestion = false;\n      item.isClick = true;\n      this.question = item.question;\n      this.value = item.value;\n      this.id = item.id;\n    },\n  },\n};\n</script>\n<style>\n.box {\n  text-align: center;\n  font-size: 15px;\n  height: 70px;\n  width: 100%;\n  color: white;\n  background-color: rgb(0, 31, 146);\n  border: 1px solid white;\n  padding: 2px;\n}\n\n.box-value {\n  cursor: pointer;\n  align-content: middle;\n  text-align: center;\n  font-size: 33px;\n  height: 50px;\n  width: 100%;\n  color: yellow;\n  background-color: rgb(0, 31, 146);\n  border: 1px solid white;\n  padding: 2px;\n}\n\n.disable {\n  opacity: 0.3;\n}\n</style>"]}]}