{"remainingRequest":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/datnguyen/Documents/GitHub/cis550project/client/src/views/Login.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/src/views/Login.vue","mtime":1606886486786},{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport BaseComponent from \"../mixins/BaseComponent.js\";\nimport ValidatorUtils from \"../mixins/ValidatorUtils.js\";\nimport AuthService from \"../services/AuthService\";\n\nexport default {\n  name: \"login\",\n  mixins: [BaseComponent, ValidatorUtils],\n  data() {\n    return {\n      //Form\n      loginForm: true,\n      registerForm: false,\n\n      username: null,\n      password: null,\n      errorsLogin: {\n        username: {},\n        password: {},\n      },\n\n      usernameRegister: null,\n      passwordRegister: null,\n      confirmPasswordRegister: null,\n\n      errorsRegister: {\n        username: {},\n        password: {},\n        confirmPassword: {},\n      },\n    };\n  },\n  created() {\n    var username = localStorage.getItem(\"username\");\n    if (username) {\n      this.$router.push(\"/dashboard\");\n    } else {\n      this.$router.push(\"/login\");\n    }\n  },\n  methods: {\n    showLoginForm() {\n      this.removeErrors(this.errorsLogin);\n      this.username = null;\n      this.password = null;\n      this.usernameRegister = null;\n      this.passwordRegister = null;\n      this.confirmPasswordRegister = null;\n      this.loginForm = true;\n      this.registerForm = false;\n    },\n\n    showRegisterForm() {\n      this.removeErrors(this.errorsRegister);\n      this.username = null;\n      this.password = null;\n      this.usernameRegister = null;\n      this.passwordRegister = null;\n      this.confirmPasswordRegister = null;\n      this.registerForm = true;\n      this.loginForm = false;\n    },\n\n    // ------------------------------------- NORMAL LOGIN --------------------------------------------//\n    validateFormLogin() {\n      this.validateUsername();\n      this.validatePassword();\n\n      return !this.hasErrors(this.errorsLogin);\n    },\n\n    validateUsername() {\n      if (this.isEmpty(this.username)) {\n        this.addError(\n          \"username\",\n          false,\n          this.$i18n.t(\"login.alert_username\"),\n          this.errorsLogin\n        );\n      }\n    },\n\n    validatePassword() {\n      if (this.isEmpty(this.password)) {\n        this.addError(\n          \"password\",\n          false,\n          this.$i18n.t(\"login.alert_password\"),\n          this.errorsLogin\n        );\n      }\n    },\n\n    login() {\n      if (!this.validateFormLogin()) {\n        return;\n      }\n\n      let body = {\n        username: this.username,\n        password: this.password,\n      };\n\n      this.showLoading();\n      AuthService.login(body)\n        .then((response) => {\n          if (response.data.status == 1) {\n            localStorage.setItem(\"username\", response.data.username);\n            this.$router.push(\"/dashboard\");\n          } else {\n            this.$notify({\n              type: \"danger\",\n              message: response.data.message,\n            });\n          }\n        })\n        .catch(() => {\n          this.$notify({\n            type: \"danger\",\n            message: this.$i18n.t(\"common.error_connection\"),\n          });\n        })\n        .finally(() => {\n          this.hideLoading();\n        });\n    },\n    // ---------------------------------- END NORMAL LOGIN --------------------------------------------//\n\n    // ---------------------------------- REGISTER --------------------------------------------//\n    validateFormRegister() {\n      this.validateUsernameRegister();\n      this.validatePasswordRegister();\n      this.validateConfirmPasswordRegister();\n\n      return !this.hasErrors(this.errorsRegister);\n    },\n\n    validateUsernameRegister() {\n      if (this.isEmpty(this.usernameRegister)) {\n        this.addError(\n          \"username\",\n          false,\n          this.$i18n.t(\"login.alert_username\"),\n          this.errorsRegister\n        );\n      }\n    },\n\n    validatePasswordRegister() {\n      if (this.isEmpty(this.passwordRegister)) {\n        this.addError(\n          \"password\",\n          false,\n          this.$i18n.t(\"login.alert_password\"),\n          this.errorsRegister\n        );\n      }\n    },\n\n    validateConfirmPasswordRegister() {\n      if (this.isEmpty(this.confirmPasswordRegister)) {\n        this.addError(\n          \"confirmPassword\",\n          false,\n          \"Confirm password is not be empty\",\n          this.errorsRegister\n        );\n      }\n      if (this.confirmPasswordRegister != this.passwordRegister) {\n        this.addError(\n          \"confirmPassword\",\n          false,\n          \"Password does not match\",\n          this.errorsRegister\n        );\n      }\n    },\n\n    register() {\n      if (!this.validateFormRegister()) {\n        return;\n      }\n\n      let body = {\n        username: this.usernameRegister,\n        password: this.passwordRegister,\n      };\n\n      this.showLoading();\n      AuthService.register(body)\n        .then((response) => {\n          if (response) {\n            if (response.data.status == 1) {\n              this.$notify({\n                type: \"success\",\n                message: response.data.message,\n              });\n              this.showLoginForm();\n            } else {\n              this.$notify({\n                type: \"danger\",\n                message: response.data.message,\n              });\n            }\n          }\n        })\n        .catch(() => {\n          this.$notify({\n            type: \"danger\",\n            message: this.$i18n.t(\"common.error_connection\"),\n          });\n        })\n        .finally(() => {\n          this.hideLoading();\n        });\n    },\n  },\n  watch: {\n    username: {\n      handler() {\n        this.removeError(\"username\", this.errorsLogin);\n        this.validateUsername();\n      },\n    },\n    password: {\n      handler() {\n        this.removeError(\"password\", this.errorsLogin);\n        this.validatePassword();\n      },\n    },\n    usernameRegister: {\n      handler() {\n        this.removeError(\"username\", this.errorsRegister);\n        this.validateUsernameRegister();\n      },\n    },\n    passwordRegister: {\n      handler() {\n        this.removeError(\"password\", this.errorsRegister);\n        this.validatePasswordRegister();\n      },\n    },\n    confirmPasswordRegister: {\n      handler() {\n        this.removeError(\"confirmPassword\", this.errorsRegister);\n        this.validateConfirmPasswordRegister();\n      },\n    },\n  },\n};\n",{"version":3,"sources":["Login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"Login.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"row justify-content-center\">\n    <div class=\"col-lg-5 col-md-7\" v-if=\"loginForm\">\n      <div class=\"card bg-secondary shadow border-0\">\n        <div class=\"card-body px-lg-5 py-lg-5\">\n          <form>\n            <base-input\n              class=\"input-group-alternative mb-3\"\n              :placeholder=\"$t('login.username')\"\n              addon-left-icon=\"ni ni-single-02\"\n              v-model=\"username\"\n              :valid=\"errorsLogin.username.isValid\"\n              :error=\"errorsLogin.username.errorMessage\"\n            ></base-input>\n            <base-input\n              class=\"input-group-alternative\"\n              :placeholder=\"$t('login.password')\"\n              type=\"password\"\n              addon-left-icon=\"ni ni-lock-circle-open\"\n              v-model=\"password\"\n              :valid=\"errorsLogin.password.isValid\"\n              :error=\"errorsLogin.password.errorMessage\"\n            ></base-input>\n            <br />\n            <div class=\"text-center\">\n              <base-button\n                @click=\"login()\"\n                type=\"primary\"\n                class=\"my-2 w-100 rounded-0\"\n              >\n                {{ $t(\"login.login\") }}\n              </base-button>\n            </div>\n            <div class=\"col-md-12 text-right\">\n              <a\n                href=\"javascript:void(0);\"\n                slot=\"brand\"\n                class=\"font-italic text-primary\"\n                @click=\"showRegisterForm()\"\n              >\n                <small>Register</small>\n              </a>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-lg-5 col-md-7\" v-if=\"registerForm\">\n      <div class=\"card bg-secondary shadow border-0\">\n        <div class=\"card-body px-lg-5 py-lg-5\">\n          <form>\n            <base-input\n              class=\"input-group-alternative mb-3\"\n              :placeholder=\"$t('login.username')\"\n              addon-left-icon=\"ni ni-single-02\"\n              v-model=\"usernameRegister\"\n              :valid=\"errorsRegister.username.isValid\"\n              :error=\"errorsRegister.username.errorMessage\"\n            ></base-input>\n            <base-input\n              class=\"input-group-alternative mb-3\"\n              :placeholder=\"$t('login.password')\"\n              type=\"password\"\n              addon-left-icon=\"ni ni-lock-circle-open\"\n              v-model=\"passwordRegister\"\n              :valid=\"errorsRegister.password.isValid\"\n              :error=\"errorsRegister.password.errorMessage\"\n            ></base-input>\n            <base-input\n              class=\"input-group-alternative\"\n              :placeholder=\"$t('Confirm password *')\"\n              type=\"password\"\n              addon-left-icon=\"ni ni-lock-circle-open\"\n              v-model=\"confirmPasswordRegister\"\n              :valid=\"errorsRegister.confirmPassword.isValid\"\n              :error=\"errorsRegister.confirmPassword.errorMessage\"\n            ></base-input>\n            <br />\n            <div class=\"text-center\">\n              <base-button\n                @click=\"register()\"\n                type=\"primary\"\n                class=\"my-2 w-100 rounded-0\"\n              >\n                Register\n              </base-button>\n            </div>\n            <div class=\"col-md-12 text-right\">\n              <a\n                href=\"javascript:void(0);\"\n                slot=\"brand\"\n                class=\"font-italic text-primary\"\n                @click=\"showLoginForm()\"\n              >\n                <small>Return login</small>\n              </a>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport BaseComponent from \"../mixins/BaseComponent.js\";\nimport ValidatorUtils from \"../mixins/ValidatorUtils.js\";\nimport AuthService from \"../services/AuthService\";\n\nexport default {\n  name: \"login\",\n  mixins: [BaseComponent, ValidatorUtils],\n  data() {\n    return {\n      //Form\n      loginForm: true,\n      registerForm: false,\n\n      username: null,\n      password: null,\n      errorsLogin: {\n        username: {},\n        password: {},\n      },\n\n      usernameRegister: null,\n      passwordRegister: null,\n      confirmPasswordRegister: null,\n\n      errorsRegister: {\n        username: {},\n        password: {},\n        confirmPassword: {},\n      },\n    };\n  },\n  created() {\n    var username = localStorage.getItem(\"username\");\n    if (username) {\n      this.$router.push(\"/dashboard\");\n    } else {\n      this.$router.push(\"/login\");\n    }\n  },\n  methods: {\n    showLoginForm() {\n      this.removeErrors(this.errorsLogin);\n      this.username = null;\n      this.password = null;\n      this.usernameRegister = null;\n      this.passwordRegister = null;\n      this.confirmPasswordRegister = null;\n      this.loginForm = true;\n      this.registerForm = false;\n    },\n\n    showRegisterForm() {\n      this.removeErrors(this.errorsRegister);\n      this.username = null;\n      this.password = null;\n      this.usernameRegister = null;\n      this.passwordRegister = null;\n      this.confirmPasswordRegister = null;\n      this.registerForm = true;\n      this.loginForm = false;\n    },\n\n    // ------------------------------------- NORMAL LOGIN --------------------------------------------//\n    validateFormLogin() {\n      this.validateUsername();\n      this.validatePassword();\n\n      return !this.hasErrors(this.errorsLogin);\n    },\n\n    validateUsername() {\n      if (this.isEmpty(this.username)) {\n        this.addError(\n          \"username\",\n          false,\n          this.$i18n.t(\"login.alert_username\"),\n          this.errorsLogin\n        );\n      }\n    },\n\n    validatePassword() {\n      if (this.isEmpty(this.password)) {\n        this.addError(\n          \"password\",\n          false,\n          this.$i18n.t(\"login.alert_password\"),\n          this.errorsLogin\n        );\n      }\n    },\n\n    login() {\n      if (!this.validateFormLogin()) {\n        return;\n      }\n\n      let body = {\n        username: this.username,\n        password: this.password,\n      };\n\n      this.showLoading();\n      AuthService.login(body)\n        .then((response) => {\n          if (response.data.status == 1) {\n            localStorage.setItem(\"username\", response.data.username);\n            this.$router.push(\"/dashboard\");\n          } else {\n            this.$notify({\n              type: \"danger\",\n              message: response.data.message,\n            });\n          }\n        })\n        .catch(() => {\n          this.$notify({\n            type: \"danger\",\n            message: this.$i18n.t(\"common.error_connection\"),\n          });\n        })\n        .finally(() => {\n          this.hideLoading();\n        });\n    },\n    // ---------------------------------- END NORMAL LOGIN --------------------------------------------//\n\n    // ---------------------------------- REGISTER --------------------------------------------//\n    validateFormRegister() {\n      this.validateUsernameRegister();\n      this.validatePasswordRegister();\n      this.validateConfirmPasswordRegister();\n\n      return !this.hasErrors(this.errorsRegister);\n    },\n\n    validateUsernameRegister() {\n      if (this.isEmpty(this.usernameRegister)) {\n        this.addError(\n          \"username\",\n          false,\n          this.$i18n.t(\"login.alert_username\"),\n          this.errorsRegister\n        );\n      }\n    },\n\n    validatePasswordRegister() {\n      if (this.isEmpty(this.passwordRegister)) {\n        this.addError(\n          \"password\",\n          false,\n          this.$i18n.t(\"login.alert_password\"),\n          this.errorsRegister\n        );\n      }\n    },\n\n    validateConfirmPasswordRegister() {\n      if (this.isEmpty(this.confirmPasswordRegister)) {\n        this.addError(\n          \"confirmPassword\",\n          false,\n          \"Confirm password is not be empty\",\n          this.errorsRegister\n        );\n      }\n      if (this.confirmPasswordRegister != this.passwordRegister) {\n        this.addError(\n          \"confirmPassword\",\n          false,\n          \"Password does not match\",\n          this.errorsRegister\n        );\n      }\n    },\n\n    register() {\n      if (!this.validateFormRegister()) {\n        return;\n      }\n\n      let body = {\n        username: this.usernameRegister,\n        password: this.passwordRegister,\n      };\n\n      this.showLoading();\n      AuthService.register(body)\n        .then((response) => {\n          if (response) {\n            if (response.data.status == 1) {\n              this.$notify({\n                type: \"success\",\n                message: response.data.message,\n              });\n              this.showLoginForm();\n            } else {\n              this.$notify({\n                type: \"danger\",\n                message: response.data.message,\n              });\n            }\n          }\n        })\n        .catch(() => {\n          this.$notify({\n            type: \"danger\",\n            message: this.$i18n.t(\"common.error_connection\"),\n          });\n        })\n        .finally(() => {\n          this.hideLoading();\n        });\n    },\n  },\n  watch: {\n    username: {\n      handler() {\n        this.removeError(\"username\", this.errorsLogin);\n        this.validateUsername();\n      },\n    },\n    password: {\n      handler() {\n        this.removeError(\"password\", this.errorsLogin);\n        this.validatePassword();\n      },\n    },\n    usernameRegister: {\n      handler() {\n        this.removeError(\"username\", this.errorsRegister);\n        this.validateUsernameRegister();\n      },\n    },\n    passwordRegister: {\n      handler() {\n        this.removeError(\"password\", this.errorsRegister);\n        this.validatePasswordRegister();\n      },\n    },\n    confirmPasswordRegister: {\n      handler() {\n        this.removeError(\"confirmPassword\", this.errorsRegister);\n        this.validateConfirmPasswordRegister();\n      },\n    },\n  },\n};\n</script>\n<style></style>\n"]}]}