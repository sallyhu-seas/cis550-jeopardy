{"remainingRequest":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/datnguyen/Documents/GitHub/cis550project/client/src/components/BaseButton.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/src/components/BaseButton.vue","mtime":1606886486768},{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: \"base-button\",\n  props: {\n    tag: {\n      type: String,\n      default: \"button\",\n      description: \"Button tag (default -> button)\",\n    },\n    type: {\n      type: String,\n      default: \"default\",\n      description: \"Button type (e,g primary, danger etc)\",\n    },\n    size: {\n      type: String,\n      default: \"\",\n      description: \"Button size lg|sm\",\n    },\n    textColor: {\n      type: String,\n      default: \"\",\n      description: \"Button text color (e.g primary, danger etc)\",\n    },\n    nativeType: {\n      type: String,\n      default: \"button\",\n      description: \"Button native type (e.g submit,button etc)\",\n    },\n    icon: {\n      type: String,\n      default: \"\",\n      description: \"Button icon\",\n    },\n    text: {\n      type: String,\n      default: \"\",\n      description: \"Button text in case not provided via default slot\",\n    },\n    outline: {\n      type: Boolean,\n      default: false,\n      description: \"Whether button style is outline\",\n    },\n    rounded: {\n      type: Boolean,\n      default: false,\n      description: \"Whether button style is rounded\",\n    },\n    iconOnly: {\n      type: Boolean,\n      default: false,\n      description: \"Whether button contains only an icon\",\n    },\n    block: {\n      type: Boolean,\n      default: false,\n      description: \"Whether button is of block type\",\n    },\n  },\n  computed: {\n    classes() {\n      let btnClasses = [\n        { \"btn-block\": this.block },\n        { \"rounded-circle\": this.rounded },\n        { \"btn-icon-only\": this.iconOnly },\n        { [`text-${this.textColor}`]: this.textColor },\n        { \"btn-icon\": this.icon || this.$slots.icon },\n        this.type && !this.outline ? `btn-${this.type}` : \"\",\n        this.outline ? `btn-outline-${this.type}` : \"\",\n      ];\n      if (this.size) {\n        btnClasses.push(`btn-${this.size}`);\n      }\n      return btnClasses;\n    },\n  },\n  methods: {\n    handleClick(evt) {\n      this.$emit(\"click\", evt);\n    },\n  },\n};\n",{"version":3,"sources":["BaseButton.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BaseButton.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <component\n    :is=\"tag\"\n    :type=\"tag === 'button' ? nativeType: ''\"\n    @click=\"handleClick\"\n    class=\"btn font-size-13\"\n    :class=\"classes\"\n    v-b-tooltip.hover.bottom\n  >\n    <span class=\"btn-inner--icon\" v-if=\"$slots.icon || icon && $slots.default\">\n      <slot name=\"icon\">\n        <i :class=\"icon\"></i>\n      </slot>\n    </span>\n    <i v-if=\"!$slots.default\" :class=\"icon\"></i>\n    <span class=\"btn-inner--text\" v-if=\"$slots.icon || icon && $slots.default\">\n      <slot>{{text}}</slot>\n    </span>\n    <slot v-if=\"!$slots.icon && !icon\"></slot>\n  </component>\n</template>\n<script>\nexport default {\n  name: \"base-button\",\n  props: {\n    tag: {\n      type: String,\n      default: \"button\",\n      description: \"Button tag (default -> button)\",\n    },\n    type: {\n      type: String,\n      default: \"default\",\n      description: \"Button type (e,g primary, danger etc)\",\n    },\n    size: {\n      type: String,\n      default: \"\",\n      description: \"Button size lg|sm\",\n    },\n    textColor: {\n      type: String,\n      default: \"\",\n      description: \"Button text color (e.g primary, danger etc)\",\n    },\n    nativeType: {\n      type: String,\n      default: \"button\",\n      description: \"Button native type (e.g submit,button etc)\",\n    },\n    icon: {\n      type: String,\n      default: \"\",\n      description: \"Button icon\",\n    },\n    text: {\n      type: String,\n      default: \"\",\n      description: \"Button text in case not provided via default slot\",\n    },\n    outline: {\n      type: Boolean,\n      default: false,\n      description: \"Whether button style is outline\",\n    },\n    rounded: {\n      type: Boolean,\n      default: false,\n      description: \"Whether button style is rounded\",\n    },\n    iconOnly: {\n      type: Boolean,\n      default: false,\n      description: \"Whether button contains only an icon\",\n    },\n    block: {\n      type: Boolean,\n      default: false,\n      description: \"Whether button is of block type\",\n    },\n  },\n  computed: {\n    classes() {\n      let btnClasses = [\n        { \"btn-block\": this.block },\n        { \"rounded-circle\": this.rounded },\n        { \"btn-icon-only\": this.iconOnly },\n        { [`text-${this.textColor}`]: this.textColor },\n        { \"btn-icon\": this.icon || this.$slots.icon },\n        this.type && !this.outline ? `btn-${this.type}` : \"\",\n        this.outline ? `btn-outline-${this.type}` : \"\",\n      ];\n      if (this.size) {\n        btnClasses.push(`btn-${this.size}`);\n      }\n      return btnClasses;\n    },\n  },\n  methods: {\n    handleClick(evt) {\n      this.$emit(\"click\", evt);\n    },\n  },\n};\n</script>\n<style>\n</style>\n"]}]}