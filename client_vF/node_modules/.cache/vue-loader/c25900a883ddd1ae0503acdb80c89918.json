{"remainingRequest":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/datnguyen/Documents/GitHub/cis550project/client/src/components/BaseDropdown.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/src/components/BaseDropdown.vue","mtime":1606886486769},{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/datnguyen/Documents/GitHub/cis550project/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.dropdown {\n    list-style-type: none;\n}\n\n.dropdown .dropdown-toggle {\n    cursor: pointer;\n}\n",{"version":3,"sources":["BaseDropdown.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwFA;AACA;AACA;;AAEA;AACA;AACA","file":"BaseDropdown.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <component\n            class=\"dropdown\"\n            :is=\"tag\"\n            :class=\"[{show: isOpen}, {'dropdown': direction === 'down'}, {'dropup': direction ==='up'}]\"\n            aria-haspopup=\"true\"\n            :aria-expanded=\"isOpen\"\n            @click=\"toggleDropDown\"\n            v-click-outside=\"closeDropDown\"\n    >\n        <slot name=\"title\">\n            <a class=\"dropdown-toggle nav-link\" :class=\"{'no-caret': hideArrow}\" data-toggle=\"dropdown\">\n                <i :class=\"icon\"></i>\n                <img :src=\"img\"/>\n                <span class=\"no-icon\">{{title}}</span>\n            </a>\n        </slot>\n        <ul\n                class=\"dropdown-menu width-max-content\"\n                ref=\"menu\"\n                :class=\"[{'dropdown-menu-right': position === 'right'}, {show: isOpen}, menuClasses,{'bg-primary-line text-white': bgPrimaryLine}]\"\n        >\n            <slot></slot>\n        </ul>\n    </component>\n</template>\n<script>\n    export default {\n        name: \"base-dropdown\",\n        props: {\n            img: {\n                type: String,\n                description: \"img for dropdown title\",\n            },\n            direction: {\n                type: String,\n                default: \"down\",\n            },\n            title: {\n                type: String,\n                description: \"Dropdown title\",\n            },\n            icon: {\n                type: String,\n                description: \"Icon for dropdown title\",\n            },\n            position: {\n                type: String,\n                description: \"Position of dropdown menu (e.g right|left)\",\n            },\n            menuClasses: {\n                type: [String, Object],\n                description: \"Dropdown menu classes\",\n            },\n            hideArrow: {\n                type: Boolean,\n                description: \"Whether dropdown arrow should be hidden\",\n            },\n            appendToBody: {\n                type: Boolean,\n                default: true,\n                description: \"Whether dropdown should be appended to document body\",\n            },\n            tag: {\n                type: String,\n                default: \"li\",\n                description: \"Dropdown html tag (e.g div, li etc)\",\n            },\n            bgPrimaryLine: {}\n        },\n        data() {\n            return {\n                isOpen: false,\n            };\n        },\n        methods: {\n            toggleDropDown() {\n                this.isOpen = !this.isOpen;\n                this.$emit(\"change\", this.isOpen);\n            },\n            closeDropDown() {\n                this.isOpen = false;\n                this.$emit(\"change\", this.isOpen);\n            },\n        },\n    };\n</script>\n<style>\n    .dropdown {\n        list-style-type: none;\n    }\n\n    .dropdown .dropdown-toggle {\n        cursor: pointer;\n    }\n</style>\n"]}]}