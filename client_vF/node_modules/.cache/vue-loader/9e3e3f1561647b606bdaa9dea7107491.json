{"remainingRequest":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\src\\components\\BaseTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\src\\components\\BaseTable.vue","mtime":1606920603941},{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\sally\\OneDrive\\Documents\\GitHub\\cis550-jeopardy\\client_vF\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  name: 'base-table',\r\n  props: {\r\n    columns: {\r\n      type: Array,\r\n      default: () => [],\r\n      description: 'Table columns'\r\n    },\r\n    data: {\r\n      type: Array,\r\n      default: () => [],\r\n      description: 'Table data'\r\n    },\r\n    type: {\r\n      type: String, // striped | hover\r\n      default: '',\r\n      description: 'Whether table is striped or hover type'\r\n    },\r\n    theadClasses: {\r\n      type: String,\r\n      default: '',\r\n      description: '<thead> css classes'\r\n    },\r\n    tbodyClasses: {\r\n      type: String,\r\n      default: '',\r\n      description: '<tbody> css classes'\r\n    }\r\n  },\r\n  computed: {\r\n    tableClass() {\r\n      return this.type && `table-${this.type}`;\r\n    },\r\n    colsWithValue() {\r\n      return (row) => {\r\n        return this.columns.filter(column => this.hasValue(row, column))\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    hasValue(item, column) {\r\n      return item[column.toLowerCase()] !== 'undefined';\r\n    },\r\n    itemValue(item, column) {\r\n      return item[column.toLowerCase()];\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["BaseTable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BaseTable.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <table class=\"table tablesorter\" :class=\"tableClass\">\r\n    <thead :class=\"theadClasses\">\r\n      <tr>\r\n        <slot name=\"columns\" :columns=\"columns\">\r\n          <th v-for=\"column in columns\" :key=\"column\">{{ column }}</th>\r\n        </slot>\r\n      </tr>\r\n    </thead>\r\n    <tbody :class=\"tbodyClasses\">\r\n      <tr v-for=\"(item, index) in data\" :key=\"index\">\r\n        <slot :row=\"item\" :index=\"index\">\r\n          <td\r\n            v-for=\"(column, index) in colsWithValue(item)\"\r\n            :key=\"index\">\r\n            {{ itemValue(item, column) }}\r\n          </td>\r\n        </slot>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: 'base-table',\r\n  props: {\r\n    columns: {\r\n      type: Array,\r\n      default: () => [],\r\n      description: 'Table columns'\r\n    },\r\n    data: {\r\n      type: Array,\r\n      default: () => [],\r\n      description: 'Table data'\r\n    },\r\n    type: {\r\n      type: String, // striped | hover\r\n      default: '',\r\n      description: 'Whether table is striped or hover type'\r\n    },\r\n    theadClasses: {\r\n      type: String,\r\n      default: '',\r\n      description: '<thead> css classes'\r\n    },\r\n    tbodyClasses: {\r\n      type: String,\r\n      default: '',\r\n      description: '<tbody> css classes'\r\n    }\r\n  },\r\n  computed: {\r\n    tableClass() {\r\n      return this.type && `table-${this.type}`;\r\n    },\r\n    colsWithValue() {\r\n      return (row) => {\r\n        return this.columns.filter(column => this.hasValue(row, column))\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    hasValue(item, column) {\r\n      return item[column.toLowerCase()] !== 'undefined';\r\n    },\r\n    itemValue(item, column) {\r\n      return item[column.toLowerCase()];\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style></style>\r\n"]}]}